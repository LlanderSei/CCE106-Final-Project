// Source code dump of all files in e:\Documents\Llander\Yuemnigga\CCE106\Project\bbqlagao_and_beefpares\lib
// This file is to be used for AIs to understand the whole
// context of this project structure.
// Updated as of 2025-10-06 12:37:59 AM

// START | FILE: globals.dart
// globals.dart
import 'package:flutter/material.dart';

GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();
// END OF FILE for globals.dart


// START | FILE: main.dart
// main.dart
import 'package:bbqlagao_and_beefpares/pages/manager/staff_home_page.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/cashier_home_page.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'firebase_options.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:bbqlagao_and_beefpares/controllers/manager/users_controller.dart';
import 'package:bbqlagao_and_beefpares/models/user.dart';
import 'globals.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  await _registerFirstAdmin();
  runApp(
    ProviderScope(
      child: MaterialApp(
        navigatorKey: navigatorKey,
        initialRoute: '/staff',
        routes: {
          // '/auth': (context) => AuthScreen(),
          '/staff': (context) => StaffHomePage(),
          '/cashier': (context) => CashierHomePage(),
        },
      ),
    ),
  );
}

Future<void> _registerFirstAdmin() async {
  final usersController = UsersController();
  final adminEmail = 'admin@admin.com';
  final query = await FirebaseFirestore.instance
      .collection('users')
      .where('email', isEqualTo: adminEmail)
      .get();
  if (query.docs.isEmpty) {
    final adminUser = User(name: 'Admin', email: adminEmail, role: 'Admin');
    await usersController.addUser(adminUser, 'password');
  }
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Manager Home Screen',
      theme: ThemeData.from(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.redAccent),
      ),
    );
  }
}

// END OF FILE for main.dart


// START | FILE: controllers\general\order_controller.dart
// controllers/order_controller.dart
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:cloud_firestore/cloud_firestore.dart' as fs;
import 'package:bbqlagao_and_beefpares/models/order.dart';

class OrderController {
  final fs.FirebaseFirestore _firestore = fs.FirebaseFirestore.instance;
  final String _collection = 'orders';

  Stream<List<Order>> getOrdersByStatus(String status) => _firestore
      .collection(_collection)
      .where('status', isEqualTo: status)
      .orderBy('createdAt', descending: true)
      .snapshots()
      .map(
        (snapshot) =>
            snapshot.docs.map((doc) => Order.fromFirestore(doc)).toList(),
      );

  Future<int> getNextOrderId() async {
    final snapshot = await _firestore
        .collection(_collection)
        .orderBy('orderId', descending: true)
        .limit(1)
        .get();
    if (snapshot.docs.isEmpty) return 1;
    return 1 + snapshot.docs.first.data()['orderId'] as int;
  }

  Future<void> addOrder(Order order) async {
    await _firestore.collection(_collection).add(order.toFirestore());
    await _deductIngredients(order);
    Toast.show('Order successfully created!');
  }

  Future<void> updateOrderStatus(
    String orderId,
    String status, {
    DateTime? timestamp,
  }) async {
    final data = {
      'status': status,
      'updatedAt': fs.Timestamp.fromDate(DateTime.now()),
    };
    if (timestamp != null) {
      if (status == 'preparing')
        data['preparedAt'] = fs.Timestamp.fromDate(timestamp);
      if (status == 'serving')
        data['servedAt'] = fs.Timestamp.fromDate(timestamp);
    }
    await _firestore.collection(_collection).doc(orderId).update(data);
  }

  Future<bool> canAffordQuantity(String dishId, int quantity) async {
    final dishSnapshot = await _firestore.collection('menu').doc(dishId).get();
    if (!dishSnapshot.exists) return false;
    final dishData = dishSnapshot.data()!;
    final ingredients = List<Map<String, dynamic>>.from(
      dishData['ingredients'] ?? [],
    );
    for (var ing in ingredients) {
      final itemId = ing['itemId'];
      final reqQty = (ing['quantity'] as int) * quantity;
      final itemSnapshot = await _firestore
          .collection('inventory')
          .doc(itemId)
          .get();
      if (!itemSnapshot.exists ||
          (itemSnapshot.data()?['quantity'] ?? 0) < reqQty) {
        return false;
      }
    }
    return true;
  }

  Future<void> _deductIngredients(Order order) async {
    for (var item in order.items) {
      final dishId = item['dishId'];
      final qty = item['quantity'] as int;
      final dishSnapshot = await _firestore
          .collection('menu')
          .doc(dishId)
          .get();
      final ingredients = List<Map<String, dynamic>>.from(
        dishSnapshot.data()?['ingredients'] ?? [],
      );
      for (var ing in ingredients) {
        final itemId = ing['itemId'];
        final deductQty = (ing['quantity'] as int) * qty;
        await _firestore.collection('inventory').doc(itemId).update({
          'quantity': fs.FieldValue.increment(-deductQty),
        });
      }
    }
  }
}

// END OF FILE for controllers\general\order_controller.dart


// START | FILE: controllers\general\payment_controller.dart
// controllers/payment_controller.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:bbqlagao_and_beefpares/models/payment.dart';

class PaymentController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final String _collection = 'payments';

  Future<void> addPayment(Payment payment) async {
    await _firestore.collection(_collection).add(payment.toFirestore());
  }

  Stream<List<Payment>> getPaymentsByOrderId(int orderId) => _firestore
      .collection(_collection)
      .where('orderId', isEqualTo: orderId)
      .snapshots()
      .map(
        (snapshot) =>
            snapshot.docs.map((doc) => Payment.fromFirestore(doc)).toList(),
      );
}

// END OF FILE for controllers\general\payment_controller.dart


// START | FILE: controllers\manager\category_controller.dart
//controllers/manager/category_controller.dart
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:bbqlagao_and_beefpares/models/category.dart';

class CategoryController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final String _collection = 'categories';

  Stream<List<Category>> get getCategories => _firestore
      .collection(_collection)
      .snapshots()
      .map(
        (snapshot) =>
            snapshot.docs.map((doc) => Category.fromFirestore(doc)).toList(),
      );

  Future<void> addCategory(Category category) async {
    await _firestore.collection(_collection).add({
      ...category.toFirestore(),
      'createdAt': Timestamp.now(),
      'updatedAt': Timestamp.now(),
    });
    Toast.show('Category added successfully');
  }

  Future<void> updateCategory(String id, Category category) async {
    await _firestore.collection(_collection).doc(id).update({
      ...category.toFirestore(),
      'updatedAt': Timestamp.now(),
    });
    Toast.show('Category updated successfully');
  }

  Future<void> deleteCategory(String id) async {
    await _firestore.collection(_collection).doc(id).delete();
    Toast.show('Category deleted successfully');
  }
}

// END OF FILE for controllers\manager\category_controller.dart


// START | FILE: controllers\manager\inventory_controller.dart
// lib/controllers/inventory_controller.dart
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:bbqlagao_and_beefpares/models/item.dart';
import 'package:flutter/material.dart';

class InventoryController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final String _collection = 'inventory';

  Stream<List<Item>> get getItems => _firestore
      .collection(_collection)
      .snapshots()
      .map(
        (snapshot) =>
            snapshot.docs.map((doc) => Item.fromFirestore(doc)).toList(),
      );

  Future<void> addItem(Item item) async {
    await _firestore.collection(_collection).add(item.toFirestore());
    Toast.show('Item added successfully.');
  }

  Future<void> updateItem(String id, Item item) async {
    await _firestore.collection(_collection).doc(id).update(item.toFirestore());
    await _firestore.collection(_collection).add(item.toFirestore());
    Toast.show('Item updated successfully.');
  }

  Future<void> deleteItem(String id) async {
    await _firestore.collection(_collection).doc(id).delete();
    Toast.show('Item deleted successfully.');
  }
}

// END OF FILE for controllers\manager\inventory_controller.dart


// START | FILE: controllers\manager\menu_controller.dart
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:bbqlagao_and_beefpares/models/dish.dart';

class MenuController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final String _collection = 'menu';

  Stream<List<Dish>> get getDishes => _firestore
      .collection(_collection)
      .snapshots()
      .map(
        (snapshot) =>
            snapshot.docs.map((doc) => Dish.fromFirestore(doc)).toList(),
      );

  Future<void> addDish(Dish dish) async {
    await _firestore.collection(_collection).add(dish.toFirestore());
    Toast.show('Menu added successfully');
  }

  Future<void> updateDish(String id, Dish dish) async {
    await _firestore.collection(_collection).doc(id).update(dish.toFirestore());
    Toast.show('Menu updated successfully');
  }

  Future<void> deleteDish(String id) async {
    await _firestore.collection(_collection).doc(id).delete();
    Toast.show('Menu added successfully');
  }
}

// END OF FILE for controllers\manager\menu_controller.dart


// START | FILE: controllers\manager\users_controller.dart
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart' as auth;
import 'package:bbqlagao_and_beefpares/models/user.dart';

class UsersController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final auth.FirebaseAuth _auth = auth.FirebaseAuth.instance;
  final String _collection = 'users';

  Stream<List<User>> get getUsers => _firestore
      .collection(_collection)
      .where('role', whereIn: ['Admin', 'Manager', 'Cashier'])
      .snapshots()
      .map(
        (snapshot) =>
            snapshot.docs.map((doc) => User.fromFirestore(doc)).toList(),
      );

  Future<void> addUser(User user, String password) async {
    try {
      auth.UserCredential userCredential = await _auth
          .createUserWithEmailAndPassword(
            email: user.email,
            password: password,
          );
      String uid = userCredential.user!.uid;
      await _firestore.collection(_collection).doc(uid).set(user.toFirestore());
      await _firestore.collection(_collection).doc(uid).update({
        'provider': 'Email/Password',
      });
      Toast.show('User added successfully');
    } catch (e) {
      rethrow;
    }
  }

  Future<void> updateUser(id, User user) async {
    await _firestore.collection(_collection).doc(id).update(user.toFirestore());
    Toast.show('User updated successfully');
  }
}

// END OF FILE for controllers\manager\users_controller.dart


// START | FILE: models\category.dart
//models/category.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Category {
  final String? id;
  final String name;
  final Timestamp? createdAt;
  final Timestamp? updatedAt;

  Category({this.id, required this.name, this.createdAt, this.updatedAt});

  factory Category.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>? ?? {};
    return Category(
      id: doc.id,
      name: data['name'] ?? '',
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
    );
  }

  Map<String, dynamic> toFirestore() {
    return {'name': name};
  }
}

// END OF FILE for models\category.dart


// START | FILE: models\dish.dart
//models/dish.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Dish {
  final String? id;
  final String name;
  final String? description;
  final double price;
  final bool isVisible;
  final bool isAvailable;
  final List<Map<String, dynamic>> ingredients;
  final List<Map<String, dynamic>> categories;
  final String? imageUrl;

  Dish({
    this.id,
    required this.name,
    this.description,
    required this.price,
    this.isVisible = true,
    this.isAvailable = true,
    required this.ingredients,
    required this.categories,
    this.imageUrl,
  });

  factory Dish.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>? ?? {};
    return Dish(
      id: doc.id,
      name: data['name'] ?? '',
      description: data['description'],
      price: (data['price'] ?? 0.0).toDouble(),
      isVisible: data['isVisible'] ?? true,
      isAvailable: data['isAvailable'] ?? true,
      ingredients: List<Map<String, dynamic>>.from(data['ingredients'] ?? []),
      categories: List<Map<String, dynamic>>.from(data['categories'] ?? []),
      imageUrl: data['imageUrl'],
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'name': name,
      if (description != null) 'description': description,
      'price': price,
      'isVisible': isVisible,
      'isAvailable': isAvailable,
      'ingredients': ingredients,
      'categories': categories,
      if (imageUrl != null) 'imageUrl': imageUrl,
    };
  }
}
// END OF FILE for models\dish.dart


// START | FILE: models\item.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Item {
  final String? id;
  final String name;
  final String? description;
  final int quantity;
  final String? imageUrl;

  Item({
    this.id,
    required this.name,
    this.description,
    required this.quantity,
    this.imageUrl,
  });

  factory Item.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>? ?? {};
    return Item(
      id: doc.id,
      name: data['name'] ?? '',
      description: data['description'],
      quantity: data['quantity'] ?? 0,
      imageUrl: data['imageUrl'],
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'name': name,
      if (description != null) 'description': description,
      'quantity': quantity,
      if (imageUrl != null) 'imageUrl': imageUrl,
    };
  }
}

// END OF FILE for models\item.dart


// START | FILE: models\order.dart
// models/order.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Order {
  final String? id;
  final int orderId;
  final String? userId;
  final String name;
  final List<Map<String, dynamic>> items;
  final String status;
  final double totalAmount;
  final String orderType;
  final DateTime createdAt;
  final DateTime? preparedAt;
  final DateTime? servedAt;
  final DateTime updatedAt;

  Order({
    this.id,
    required this.orderId,
    this.userId,
    required this.name,
    required this.items,
    this.status = 'reviewing',
    required this.totalAmount,
    this.orderType = 'dine-in',
    required this.createdAt,
    this.preparedAt,
    this.servedAt,
    required this.updatedAt,
  });

  factory Order.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>? ?? {};
    return Order(
      id: doc.id,
      orderId: data['orderId'] ?? 0,
      userId: data['userId'],
      name: data['name'] ?? '',
      items: List<Map<String, dynamic>>.from(data['items'] ?? []),
      status: data['status'] ?? 'reviewing',
      totalAmount: (data['totalAmount'] ?? 0.0).toDouble(),
      orderType: data['orderType'] ?? 'dine-in',
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      preparedAt: (data['preparedAt'] as Timestamp?)?.toDate(),
      servedAt: (data['servedAt'] as Timestamp?)?.toDate(),
      updatedAt: (data['updatedAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'orderId': orderId,
      if (userId != null) 'userId': userId,
      'name': name,
      'items': items,
      'status': status,
      'totalAmount': totalAmount,
      'orderType': orderType,
      'createdAt': Timestamp.fromDate(createdAt),
      if (preparedAt != null) 'preparedAt': Timestamp.fromDate(preparedAt!),
      if (servedAt != null) 'servedAt': Timestamp.fromDate(servedAt!),
      'updatedAt': Timestamp.fromDate(updatedAt),
    };
  }
}

// END OF FILE for models\order.dart


// START | FILE: models\payment.dart
// models/payment.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Payment {
  final String? id;
  final int orderId;
  final String paymentMethod;
  final Map<String, dynamic> paymentDetails;

  Payment({
    this.id,
    required this.orderId,
    required this.paymentMethod,
    required this.paymentDetails,
  });

  factory Payment.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>? ?? {};
    return Payment(
      id: doc.id,
      orderId: data['orderId'] ?? 0,
      paymentMethod: data['paymentMethod'] ?? '',
      paymentDetails: Map<String, dynamic>.from(data['paymentDetails'] ?? {}),
    );
  }

  get amount => null;

  get method => null;

  Map<String, dynamic> toFirestore() {
    return {
      'orderId': orderId,
      'paymentMethod': paymentMethod,
      'paymentDetails': paymentDetails,
    };
  }
}

// END OF FILE for models\payment.dart


// START | FILE: models\user.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class User {
  final String? id;
  final String name;
  final String email;
  final String role;
  final String? provider;

  User({
    this.id,
    required this.name,
    required this.email,
    required this.role,
    this.provider,
  });

  factory User.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>? ?? {};
    return User(
      id: doc.id,
      name: data['name'] ?? '',
      email: data['email'] ?? '',
      role: data['role'] ?? '',
      provider: data['provider'],
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'name': name,
      'email': email,
      'role': role,
      if (provider != null) 'provider': provider,
    };
  }
}

// END OF FILE for models\user.dart


// START | FILE: pages\cashier\cashier_home_page.dart
// pages/cashier/cashier_home_page.dart
import 'package:flutter/material.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/orders_page.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/order_history_page.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/new_order_page.dart';

class CashierHomePage extends StatefulWidget {
  const CashierHomePage({super.key});

  @override
  State<CashierHomePage> createState() => _CashierHomePageState();
}

class _CashierHomePageState extends State<CashierHomePage> {
  String _currentPage = 'orders';
  String _appBarTitle = 'Cashier Dashboard';
  late ValueNotifier<bool> _showFabNotifier;

  void _onFabVisibilityChanged(bool visible) {
    _showFabNotifier.value = visible;
  }

  @override
  void initState() {
    super.initState();
    _showFabNotifier = ValueNotifier<bool>(true);
  }

  @override
  void dispose() {
    _showFabNotifier.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_appBarTitle, style: TextStyle(color: Colors.white)),
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [Colors.redAccent, Colors.red, Colors.orangeAccent],
            ),
          ),
        ),
        leading: Builder(
          builder: (context) => IconButton(
            icon: const Icon(Icons.menu, color: Colors.white),
            onPressed: () => Scaffold.of(context).openDrawer(),
          ),
        ),
      ),
      drawer: Drawer(
        child: Column(
          children: [
            Container(
              height: 75.0,
              width: double.infinity,
              decoration: const BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [Colors.redAccent, Colors.red, Colors.orangeAccent],
                ),
              ),
              child: const Padding(
                padding: EdgeInsets.all(2),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.end,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Text(
                      'BBQ Lagao & Beef Pares',
                      style: TextStyle(color: Colors.white, fontSize: 10),
                    ),
                    Text(
                      'Staff Navigation',
                      style: TextStyle(color: Colors.white, fontSize: 20),
                    ),
                  ],
                ),
              ),
            ),
            Expanded(
              child: ListView(
                padding: EdgeInsets.zero,
                children: <Widget>[
                  ListTile(
                    leading: Icon(
                      Icons.list_alt,
                      color: _currentPage == 'orders'
                          ? Colors.white
                          : Colors.redAccent,
                    ),
                    title: Text(
                      'Orders',
                      style: TextStyle(
                        color: _currentPage == 'orders'
                            ? Colors.white
                            : Colors.redAccent,
                      ),
                    ),
                    selected: _currentPage == 'orders',
                    selectedTileColor: Colors.redAccent.withValues(alpha: .75),
                    onTap: () {
                      Navigator.pop(context);
                      setState(() {
                        _currentPage = 'orders';
                        _appBarTitle = 'Orders';
                        _showFabNotifier.value = true;
                      });
                    },
                  ),
                  ListTile(
                    leading: Icon(
                      Icons.history,
                      color: _currentPage == 'orderHistory'
                          ? Colors.white
                          : Colors.redAccent,
                    ),
                    title: Text(
                      'Order History',
                      style: TextStyle(
                        color: _currentPage == 'orderHistory'
                            ? Colors.white
                            : Colors.redAccent,
                      ),
                    ),
                    selected: _currentPage == 'orderHistory',
                    selectedTileColor: Colors.redAccent.withValues(alpha: .75),
                    onTap: () {
                      Navigator.pop(context);
                      setState(() {
                        _currentPage = 'orderHistory';
                        _appBarTitle = 'Order History';
                        _showFabNotifier.value = false;
                      });
                    },
                  ),
                ],
              ),
            ),
            Align(
              alignment: Alignment.bottomRight,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: IconButton(
                  icon: const Icon(Icons.arrow_left),
                  onPressed: () => Navigator.pop(context),
                  tooltip: 'Close menu',
                ),
              ),
            ),
          ],
        ),
      ),
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    switch (_currentPage) {
      case 'orders':
        return OrdersPage(onFabVisibilityChanged: _onFabVisibilityChanged);
      case 'orderHistory':
        return const OrderHistoryPage();
      default:
        return const Center(child: Text('Page not implemented'));
    }
  }
}

// END OF FILE for pages\cashier\cashier_home_page.dart


// START | FILE: pages\cashier\new_order_page.dart
// pages\cashier\new_order_page.dart
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_button.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_checkbox.dart';
import 'package:flutter/material.dart' hide MenuController;
import 'package:bbqlagao_and_beefpares/controllers/general/order_controller.dart';
import 'package:bbqlagao_and_beefpares/controllers/manager/menu_controller.dart';
import 'package:bbqlagao_and_beefpares/models/order.dart';
import 'package:bbqlagao_and_beefpares/models/dish.dart';
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:gradient_icon/gradient_icon.dart';
import 'payment_page.dart';

class NewOrderPage extends StatefulWidget {
  const NewOrderPage({super.key});

  @override
  State<NewOrderPage> createState() => _NewOrderPageState();
}

class _NewOrderPageState extends State<NewOrderPage> {
  final OrderController _orderController = OrderController();
  final MenuController _menuController = MenuController();
  List<Map<String, dynamic>> _selectedDishes = [];
  bool _toPrepare = false;
  bool _isPaymentEnabled = false;
  bool _isLoading = false;
  double _totalAmount = 0.0;
  final String _cashierName = 'Temporary Cashier';

  @override
  void initState() {
    super.initState();
    _calculateTotal();
  }

  void _addDish() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => _DishSelectionBottomSheet(
        menuController: _menuController,
        selectedDishIds: _selectedDishes
            .map((d) => d['dishId'] as String)
            .toSet(),
        onAdd: (newDishes) {
          setState(() {
            _selectedDishes.addAll(newDishes);
            _isPaymentEnabled = false;
            _isLoading = true;
          });
          _calculateTotal();
          _checkAffordability().then((_) {
            if (mounted) {
              setState(() {
                _isLoading = false;
              });
            }
          });
        },
      ),
    );
  }

  void _updateQuantity(String dishId, int newQty) {
    final index = _selectedDishes.indexWhere((d) => d['dishId'] == dishId);
    if (index != -1 && newQty >= 1) {
      setState(() {
        _selectedDishes[index]['quantity'] = newQty;
        _selectedDishes[index]['totalPrice'] =
            _selectedDishes[index]['price'] * newQty;
        _isPaymentEnabled = false;
        _isLoading = true;
      });
      _calculateTotal();
      _checkAffordabilityForDish(dishId).then((_) {
        if (mounted) {
          setState(() {
            _isLoading = false;
          });
        }
      });
    }
  }

  void _removeDish(String dishId) {
    setState(() {
      _selectedDishes.removeWhere((d) => d['dishId'] == dishId);
      _isPaymentEnabled = false;
      _isLoading = true;
    });
    _calculateTotal();
    _checkAffordability().then((_) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    });
  }

  Future<void> _checkAffordability() async {
    if (_selectedDishes.isEmpty) {
      setState(() {
        _isPaymentEnabled = false;
      });
      return;
    }

    final dishIds = _selectedDishes.map((d) => d['dishId'] as String).toList();
    Map<String, bool> affordabilityMap = {};

    for (String dishId in dishIds) {
      try {
        final dish = _selectedDishes.firstWhere((d) => d['dishId'] == dishId);
        final affordable = await _orderController.canAffordQuantity(
          dishId,
          dish['quantity'],
        );
        affordabilityMap[dishId] = affordable;
      } catch (e) {
        print('Error: $e');
      }
    }

    setState(() {
      bool allAffordable = true;
      for (var dish in _selectedDishes) {
        final dishId = dish['dishId'] as String;
        dish['warning'] = !(affordabilityMap[dishId] ?? true);
        if (dish['warning']) allAffordable = false;
      }
      _isPaymentEnabled = allAffordable && _selectedDishes.isNotEmpty;
    });
  }

  Future<void> _checkAffordabilityForDish(String dishId) async {
    await _checkAffordability();
  }

  void _calculateTotal() {
    _totalAmount = _selectedDishes.fold(
      0.0,
      (sum, d) => sum + (d['totalPrice'] as double),
    );
    setState(() {});
  }

  Future<void> _proceedToPayment() async {
    setState(() {
      _isLoading = true;
    });
    await _checkAffordability();
    setState(() {
      _isLoading = false;
    });
    if (!_isPaymentEnabled) {
      Toast.show('Cannot proceed: Insufficient ingredients for some items.');
      return;
    }
    final nextOrderId = await _orderController.getNextOrderId();
    final now = DateTime.now();
    final order = Order(
      orderId: nextOrderId,
      name: _cashierName,
      items: _selectedDishes
          .map((d) => {'dishId': d['dishId'], 'quantity': d['quantity']})
          .toList(),
      status: _toPrepare ? 'preparing' : 'reviewing',
      totalAmount: _totalAmount,
      createdAt: now,
      updatedAt: now,
      preparedAt: _toPrepare ? now : null,
    );
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =>
            PaymentPage(order: order, totalAmount: _totalAmount),
      ),
    );
    if (result == true) {
      await _orderController.addOrder(order);
      // Navigate back to cashier's homepage by popping until we reach it
      Navigator.popUntil(context, (route) => route.isFirst);
    }
  }

  @override
  Widget build(BuildContext context) {
    bool isEnabled = _isPaymentEnabled && !_isLoading;
    final Color buttonColor = isEnabled ? Colors.redAccent : Colors.grey;
    final Widget buttonLabel;
    if (_isLoading) {
      buttonLabel = Row(
        mainAxisSize: MainAxisSize.min,
        children: const [
          GradientCircularProgressIndicator(),
          SizedBox(width: 8),
          Text('Checking...', style: TextStyle(color: Colors.white)),
        ],
      );
    } else if (_selectedDishes.isEmpty) {
      buttonLabel = const Text(
        'Add Dishes First',
        style: TextStyle(color: Colors.white),
      );
    } else if (!_isPaymentEnabled) {
      buttonLabel = const Text(
        'Max Quantity Reached',
        style: TextStyle(color: Colors.white),
      );
    } else {
      buttonLabel = Row(
        mainAxisSize: MainAxisSize.min,
        children: const [
          Icon(Icons.payment, color: Colors.white),
          SizedBox(width: 8),
          Text('To Payment', style: TextStyle(color: Colors.white)),
        ],
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text('New Order', style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.redAccent,
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Order Initiated By', textScaler: TextScaler.linear(.75)),
                Text(
                  '$_cashierName (Cashier)',
                  textScaler: TextScaler.linear(1.25),
                ),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 8.0),
            child: SizedBox(
              width: double.infinity,
              child: GradientButton(
                onPressed: _addDish,
                child: Text(
                  'Add Dish',
                  style: TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          ),
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.symmetric(horizontal: 8.0),
              itemCount: _selectedDishes.length,
              itemBuilder: (context, index) {
                final dish = _selectedDishes[index];
                return Card(
                  child: Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      gradient: LinearGradient(
                        colors: [Colors.red[50]!, Colors.orange[50]!],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                    ),
                    child: ListTile(
                      title: Text(dish['name']),
                      subtitle: Text(
                        'Price: ₱${dish['price']}\nSubtotal: ₱${dish['totalPrice']}',
                        style: TextStyle(
                          color: dish['warning'] ? Colors.red : null,
                        ),
                      ),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          IconButton(
                            icon: const Icon(Icons.remove),
                            onPressed: () {
                              final newQty = (dish['quantity'] as int) - 1;
                              if (newQty >= 1) {
                                _updateQuantity(dish['dishId'], newQty);
                              } else {
                                _removeDish(dish['dishId']);
                              }
                            },
                          ),
                          Text('${dish['quantity']}'),
                          IconButton(
                            icon: const Icon(Icons.add),
                            onPressed: () => _updateQuantity(
                              dish['dishId'],
                              (dish['quantity'] as int) + 1,
                            ),
                          ),
                          IconButton(
                            icon: GradientIcon(
                              icon: Icons.delete,
                              gradient: LinearGradient(
                                colors: GradientColorSets.set2,
                              ),
                              offset: Offset.zero,
                            ),
                            onPressed: () => _removeDish(dish['dishId']),
                            onLongPress: () => Toast.show('Delete item'),
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
          Row(
            children: [
              const SizedBox(width: 16),
              GradientCheckbox(
                value: _toPrepare,
                onChanged: (val) => setState(() => _toPrepare = val!),
              ),
              const Expanded(child: Text('Prepare Immediately?')),
              const SizedBox(width: 16),
            ],
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text(
              'Total: ₱$_totalAmount',
              style: Theme.of(context).textTheme.titleLarge,
            ),
          ),
          const SizedBox(height: 10),
        ],
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.miniEndFloat,
      floatingActionButton: FloatingActionButton.extended(
        onPressed: isEnabled ? _proceedToPayment : null,
        backgroundColor: buttonColor,
        label: buttonLabel,
      ),
    );
  }
}

class _DishSelectionBottomSheet extends StatefulWidget {
  final MenuController menuController;
  final Set<String> selectedDishIds;
  final Function(List<Map<String, dynamic>>) onAdd;

  const _DishSelectionBottomSheet({
    required this.menuController,
    required this.selectedDishIds,
    required this.onAdd,
  });

  @override
  State<_DishSelectionBottomSheet> createState() =>
      _DishSelectionBottomSheetState();
}

class _DishSelectionBottomSheetState extends State<_DishSelectionBottomSheet> {
  String _searchText = '';
  final List<Map<String, dynamic>> _selectedDishes = [];

  bool _isSelected(Dish dish) {
    return _selectedDishes.any((m) => m['id'] == dish.id);
  }

  @override
  Widget build(BuildContext context) {
    return DraggableScrollableSheet(
      initialChildSize: 0.8,
      minChildSize: 0.5,
      maxChildSize: 0.95,
      expand: false,
      builder: (context, scrollController) => Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              onChanged: (val) =>
                  setState(() => _searchText = val.toLowerCase()),
              decoration: const InputDecoration(
                labelText: 'Search Dishes',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.search),
              ),
            ),
          ),
          Expanded(
            child: StreamBuilder<List<Dish>>(
              stream: widget.menuController.getDishes,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(
                    child: GradientCircularProgressIndicator(),
                  );
                }
                if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return const Center(child: Text('No dishes available.'));
                }
                final availableDishes = snapshot.data!
                    .where(
                      (dish) =>
                          dish.isVisible &&
                          dish.isAvailable &&
                          !widget.selectedDishIds.contains(dish.id) &&
                          dish.name.toLowerCase().contains(_searchText),
                    )
                    .toList();
                return ListView.builder(
                  controller: scrollController,
                  itemCount: availableDishes.length,
                  itemBuilder: (context, index) {
                    final dish = availableDishes[index];
                    final isSelected = _isSelected(dish);
                    return ListTile(
                      leading: GradientCheckbox(
                        value: isSelected,
                        onChanged: (val) {
                          setState(() {
                            if (val!) {
                              _selectedDishes.add({
                                'id': dish.id,
                                'name': dish.name,
                                'price': dish.price,
                              });
                            } else {
                              _selectedDishes.removeWhere(
                                (m) => m['id'] == dish.id,
                              );
                            }
                          });
                        },
                      ),
                      title: Text(dish.name),
                      subtitle: Text('₱${dish.price}'),
                      trailing: dish.imageUrl != null
                          ? Image.network(
                              dish.imageUrl!,
                              width: 50,
                              height: 50,
                              fit: BoxFit.cover,
                              errorBuilder: (context, error, stackTrace) =>
                                  const Icon(Icons.image_not_supported),
                            )
                          : const Icon(Icons.image_not_supported),
                    );
                  },
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                OutlinedButton(
                  onPressed: () => Navigator.pop(context),
                  style: OutlinedButton.styleFrom(
                    side: const BorderSide(color: Colors.orange),
                  ),
                  child: const Text(
                    'Cancel',
                    style: TextStyle(color: Colors.orange),
                  ),
                ),
                const SizedBox(width: 8),
                GradientButton(
                  onPressed: () {
                    final newDishes = _selectedDishes
                        .map(
                          (m) => {
                            'dishId': m['id'],
                            'name': m['name'],
                            'price': m['price'],
                            'quantity': 1,
                            'totalPrice': m['price'],
                            'warning': false,
                          },
                        )
                        .toList();
                    widget.onAdd(newDishes);
                    Navigator.pop(context);
                  },
                  child: Text(
                    'Add Dish',
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// END OF FILE for pages\cashier\new_order_page.dart


// START | FILE: pages\cashier\orders_page.dart
//orders_page.dart
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_button.dart';
import 'package:flutter/material.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/orders_tab_page.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/preparing_tab_page.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/serving_tab_page.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/new_order_page.dart';
import 'package:bbqlagao_and_beefpares/controllers/general/order_controller.dart';
import 'package:bbqlagao_and_beefpares/models/order.dart';
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';

class OrdersPage extends StatefulWidget {
  final Function(bool)? onFabVisibilityChanged;

  const OrdersPage({super.key, this.onFabVisibilityChanged});

  @override
  State<OrdersPage> createState() => _OrdersPageState();
}

class _OrdersPageState extends State<OrdersPage> {
  int _currentIndex = 0;
  late final List<Widget> _tabs;
  late ValueNotifier<bool> _showFabNotifier;
  bool _loading = false;

  @override
  void initState() {
    super.initState();
    _showFabNotifier = ValueNotifier<bool>(true);
    _tabs = [
      OrdersTabPage(
        onFabVisibilityChanged: (visible) {
          _showFabNotifier.value = visible;
        },
      ),
      const PreparingTabPage(),
      const ServingTabPage(),
    ];
  }

  Future<void> _completeAllServing() async {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Complete All Serving Orders'),
        content: const Text(
          'Are you sure you want to set all serving orders to completed?',
        ),
        actions: [
          OutlinedButton(
            style: OutlinedButton.styleFrom(
              side: BorderSide(color: Colors.orangeAccent),
              foregroundColor: Colors.orangeAccent,
            ),
            onPressed: () => Navigator.pop(context),
            child: const Text('No'),
          ),
          GradientButton(
            colors: GradientColorSets.set1,
            onPressed: () async {
              Navigator.pop(context);
              setState(() {
                _loading = true;
              });
              try {
                final controller = OrderController();
                final stream = controller.getOrdersByStatus('serving');
                final snapshot = await stream.first;
                final futures = snapshot.map((order) async {
                  await controller.updateOrderStatus(order.id!, 'completed');
                });
                await Future.wait(futures);
                Toast.show('All serving orders completed');
              } catch (e) {
                Toast.show('Error: $e');
              } finally {
                setState(() {
                  _loading = false;
                });
              }
            },
            child: const Text('Yes', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _loading
          ? const Center(child: GradientCircularProgressIndicator())
          : _tabs[_currentIndex],
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (index) {
          setState(() => _currentIndex = index);
          // Reset FAB visibility when switching back to Orders tab
          if (index == 0) {
            _showFabNotifier.value = true;
          }
        },
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.list_alt), label: 'Orders'),
          BottomNavigationBarItem(
            icon: Icon(Icons.schedule),
            label: 'Preparing',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.room_service),
            label: 'Serving',
          ),
        ],
        type: BottomNavigationBarType.fixed,
        selectedItemColor: Colors.redAccent,
        unselectedItemColor: Colors.grey,
      ),
      floatingActionButton: _currentIndex == 0
          ? ValueListenableBuilder<bool>(
              valueListenable: _showFabNotifier,
              builder: (context, value, child) {
                return AnimatedOpacity(
                  opacity: value ? 1.0 : 0.0,
                  duration: const Duration(milliseconds: 300),
                  child: IgnorePointer(
                    ignoring: !value, // Disable touch events when hidden
                    child: FloatingActionButton(
                      backgroundColor: Colors.redAccent[100],
                      foregroundColor: Colors.white,
                      shape: const CircleBorder(),
                      tooltip: 'Add New Order',
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const NewOrderPage(),
                          ),
                        );
                      },
                      child: const Icon(Icons.add),
                    ),
                  ),
                );
              },
            )
          : _currentIndex == 2
          ? FloatingActionButton(
              backgroundColor: Colors.redAccent[100],
              foregroundColor: Colors.white,
              shape: const CircleBorder(),
              tooltip: 'Complete All',
              onPressed: _completeAllServing,
              child: const Icon(Icons.checklist),
            )
          : null,
    );
  }
}

// END OF FILE for pages\cashier\orders_page.dart


// START | FILE: pages\cashier\orders_tab_page.dart
//orders_tab_page.dart
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_button.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:flutter/material.dart';
import 'package:bbqlagao_and_beefpares/controllers/general/order_controller.dart';
import 'package:bbqlagao_and_beefpares/models/order.dart';
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:flutter/rendering.dart';
import 'package:gradient_icon/gradient_icon.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/order_details_page.dart';

class OrdersTabPage extends StatefulWidget {
  final Function(bool)? onFabVisibilityChanged;

  const OrdersTabPage({super.key, this.onFabVisibilityChanged});

  @override
  State<OrdersTabPage> createState() => _OrdersTabPageState();
}

class _OrdersTabPageState extends State<OrdersTabPage> {
  final ScrollController _scrollController = ScrollController();
  final OrderController _controller = OrderController();

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_scrollListener);
  }

  void _scrollListener() {
    // Show FAB when scrolling up, hide when scrolling down
    final isScrollingDown =
        _scrollController.position.userScrollDirection ==
        ScrollDirection.reverse;
    if (widget.onFabVisibilityChanged != null) {
      widget.onFabVisibilityChanged!(!isScrollingDown);
    }
  }

  Future<void> _updateStatus(Order order, String status) async {
    try {
      await _controller.updateOrderStatus(order.id!, status);
      Toast.show('Order updated to $status');
    } catch (e) {
      Toast.show('Error: $e');
    }
  }

  void _cancelOrder(Order order) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Cancellation'),
        content: const Text('Are you sure you want to cancel this order?'),
        actions: [
          OutlinedButton(
            style: OutlinedButton.styleFrom(
              side: BorderSide(color: Colors.orangeAccent),
              foregroundColor: Colors.orangeAccent,
            ),
            onPressed: () => Navigator.pop(context),
            child: const Text('No'),
          ),
          GradientButton(
            colors: GradientColorSets.set1,
            onPressed: () async {
              Navigator.pop(context);
              await _updateStatus(order, 'cancelled');
            },
            child: const Text('Yes', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            children: [
              Expanded(
                child: Text(
                  'Orders',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
              ),
              Text('Actions', style: Theme.of(context).textTheme.titleLarge),
            ],
          ),
        ),
        Expanded(
          child: StreamBuilder<List<Order>>(
            stream: _controller.getOrdersByStatus('reviewing'),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: GradientCircularProgressIndicator());
              }
              if (snapshot.hasError) {
                return Center(child: Text('Error: ${snapshot.error}'));
              }
              if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return const Center(child: Text('No orders found.'));
              }
              final orders = snapshot.data!;
              return ListView.builder(
                controller: _scrollController,
                itemCount: orders.length,
                itemBuilder: (context, index) {
                  final order = orders[index];
                  return Container(
                    margin: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [Colors.red[50]!, Colors.orange[50]!],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Order #${order.orderId.toString()}",
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                Text(order.name),
                                Text('Dine-in'),
                              ],
                            ),
                          ),
                          Row(
                            children: [
                              IconButton(
                                icon: GradientIcon(
                                  icon: Icons.cancel,
                                  offset: Offset.zero,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set1,
                                  ),
                                ),
                                onPressed: () => _cancelOrder(order),
                              ),
                              IconButton(
                                icon: GradientIcon(
                                  icon: Icons.kitchen,
                                  offset: Offset.zero,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set2,
                                  ),
                                ),
                                onPressed: () =>
                                    _updateStatus(order, 'preparing'),
                              ),
                              IconButton(
                                icon: GradientIcon(
                                  icon: Icons.visibility,
                                  offset: Offset.zero,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set3,
                                  ),
                                ),
                                onPressed: () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) =>
                                          OrderDetailsPage(order: order),
                                    ),
                                  );
                                },
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ),
      ],
    );
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }
}

// END OF FILE for pages\cashier\orders_tab_page.dart


// START | FILE: pages\cashier\order_details_page.dart
//order_details_page.dart
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:bbqlagao_and_beefpares/controllers/general/order_controller.dart';
import 'package:bbqlagao_and_beefpares/models/order.dart';
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:gradient_icon/gradient_icon.dart';
import 'package:bbqlagao_and_beefpares/controllers/general/payment_controller.dart';
import 'package:bbqlagao_and_beefpares/models/payment.dart';
import 'package:cloud_firestore/cloud_firestore.dart' as cfs;
import 'package:bbqlagao_and_beefpares/controllers/manager/menu_controller.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_button.dart';

class OrderDetailsPage extends StatefulWidget {
  final Order order;

  const OrderDetailsPage({super.key, required this.order});

  @override
  State<OrderDetailsPage> createState() => _OrderDetailsPageState();
}

class _OrderDetailsPageState extends State<OrderDetailsPage> {
  final OrderController _orderController = OrderController();
  final cfs.FirebaseFirestore _firestore = cfs.FirebaseFirestore.instance;
  final Map<String, String> _dishNames = {};
  bool _loading = false;
  bool _namesLoaded = false;

  @override
  void initState() {
    super.initState();
    _fetchDishNames();
  }

  Future<void> _fetchDishNames() async {
    final futures = widget.order.items.map((item) async {
      final dishId = item['dishId'] as String;
      final doc = await _firestore.collection('menu').doc(dishId).get();
      if (doc.exists) {
        _dishNames[dishId] = doc.data()!['name'] as String;
      }
    });
    await Future.wait(futures);
    setState(() {
      _namesLoaded = true;
    });
  }

  Future<void> _updateStatus(String status) async {
    setState(() {
      _loading = true;
    });
    try {
      await _orderController.updateOrderStatus(widget.order.id!, status);
      Toast.show('Order status updated to $status');
      Navigator.pop(context);
    } catch (e) {
      Toast.show('Error updating status: $e');
    } finally {
      setState(() {
        _loading = false;
      });
    }
  }

  Future<void> _cancelOrder() async {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Cancellation'),
        content: const Text('Are you sure you want to cancel this order?'),
        actions: [
          OutlinedButton(
            style: OutlinedButton.styleFrom(
              side: BorderSide(color: Colors.orangeAccent),
              foregroundColor: Colors.orangeAccent,
            ),
            onPressed: () => Navigator.pop(context),
            child: const Text('No'),
          ),
          GradientButton(
            colors: GradientColorSets.set3,
            onPressed: () async {
              Navigator.pop(context);
              await _updateStatus('cancelled');
            },
            child: const Text('Yes', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final status = widget.order.status;
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Order Details',
          style: TextStyle(color: Colors.white),
        ),
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [Colors.redAccent, Colors.red, Colors.orangeAccent],
            ),
          ),
        ),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text(
              status[0].toUpperCase() + status.substring(1),
              style: Theme.of(
                context,
              ).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),
            ),
          ),
          Expanded(
            child: _loading
                ? const Center(child: GradientCircularProgressIndicator())
                : SingleChildScrollView(
                    child: Column(
                      children: [
                        ExpansionTile(
                          title: const Text('Order Details'),
                          initiallyExpanded: true,
                          children: [
                            Padding(
                              padding: const EdgeInsets.all(16.0),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text('Ordered By: ${widget.order.name}'),
                                  const Text('Order Type: Dine-in'),
                                  Text(
                                    'Order Created At: ${DateFormat('MMM dd, yyyy hh:mm a').format(widget.order.createdAt)}',
                                  ),
                                  const SizedBox(height: 16),
                                  const Text('Items:'),
                                  if (!_namesLoaded)
                                    const Center(
                                      child:
                                          GradientCircularProgressIndicator(),
                                    )
                                  else
                                    ListView.builder(
                                      shrinkWrap: true,
                                      physics:
                                          const NeverScrollableScrollPhysics(),
                                      itemCount: widget.order.items.length,
                                      itemBuilder: (context, index) {
                                        final item = widget.order.items[index];
                                        final dishId = item['dishId'] as String;
                                        final quantity =
                                            item['quantity'] as int;
                                        final name =
                                            _dishNames[dishId] ??
                                            'Unknown Dish';
                                        return ListTile(
                                          leading: Text(
                                            name,
                                            style: const TextStyle(
                                              fontSize: 18,
                                            ),
                                          ),
                                          trailing: Text(
                                            quantity.toString(),
                                            style: const TextStyle(
                                              fontSize: 18,
                                            ),
                                          ),
                                        );
                                      },
                                    ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        ExpansionTile(
                          title: const Text('Payment Details'),
                          initiallyExpanded: false,
                          children: [
                            StreamBuilder<List<Payment>>(
                              stream: PaymentController().getPaymentsByOrderId(
                                widget.order.orderId,
                              ),
                              builder: (context, snapshot) {
                                if (snapshot.connectionState ==
                                    ConnectionState.waiting) {
                                  return const Center(
                                    child: GradientCircularProgressIndicator(),
                                  );
                                }
                                if (snapshot.hasError) {
                                  return Text('Error: ${snapshot.error}');
                                }
                                if (!snapshot.hasData ||
                                    snapshot.data!.isEmpty) {
                                  return const Text('No payments yet.');
                                }
                                final payments = snapshot.data!;
                                return ListView.builder(
                                  shrinkWrap: true,
                                  physics: const NeverScrollableScrollPhysics(),
                                  itemCount: payments.length,
                                  itemBuilder: (context, index) {
                                    final payment = payments[index];
                                    return ListTile(
                                      title: Text(
                                        'Amount: ₱${payment.paymentDetails['totalAmount'] ?? 'N/A'}',
                                      ),
                                      subtitle: Text(
                                        'Method: ${payment.paymentMethod} \n${payment.paymentMethod == 'Cash' ? '' : 'Provider: ${payment.paymentDetails['provider']}\nMobile Number: ${payment.paymentDetails['mobileNumber']}\nReference Num: ${payment.paymentDetails['referenceNumber']}'}',
                                      ),
                                    );
                                  },
                                );
                              },
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
          ),
        ],
      ),
      bottomNavigationBar: BottomAppBar(
        child: _loading
            ? const Center(child: GradientCircularProgressIndicator())
            : Row(
                mainAxisAlignment: MainAxisAlignment.end,
                spacing: 10,
                children: [
                  OutlinedButton(
                    style: OutlinedButton.styleFrom(
                      side: BorderSide(color: Colors.orangeAccent),
                      foregroundColor: Colors.orangeAccent,
                    ),
                    onPressed: () => Navigator.pop(context),
                    child: const Text(
                      'Back',
                      style: TextStyle(color: Colors.amber),
                    ),
                  ),
                  if (status == 'reviewing')
                    GradientButton(
                      onPressed: _cancelOrder,
                      colors: GradientColorSets.set1,
                      child: const Text(
                        'Cancel Order',
                        style: TextStyle(color: Colors.white),
                      ),
                    ),
                  if (status == 'reviewing')
                    GradientButton(
                      onPressed: () => _updateStatus('preparing'),
                      child: const Text(
                        'To Prepare',
                        style: TextStyle(color: Colors.white),
                      ),
                    ),
                  if (status == 'preparing')
                    GradientButton(
                      onPressed: () => _updateStatus('serving'),
                      child: const Text(
                        'To Serve',
                        style: TextStyle(color: Colors.white),
                      ),
                    ),
                  if (status == 'serving')
                    GradientButton(
                      onPressed: () => _updateStatus('completed'),
                      child: const Text(
                        'Complete',
                        style: TextStyle(color: Colors.white),
                      ),
                    ),
                ],
              ),
      ),
    );
  }
}

// END OF FILE for pages\cashier\order_details_page.dart


// START | FILE: pages\cashier\order_history_page.dart
// pages/cashier/order_history_page.dart
import 'package:flutter/material.dart';
import 'package:bbqlagao_and_beefpares/controllers/general/order_controller.dart';
import 'package:bbqlagao_and_beefpares/models/order.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/order_details_page.dart';
import 'package:gradient_icon/gradient_icon.dart';
import 'package:intl/intl.dart';
import 'package:bbqlagao_and_beefpares/styles/color.dart';

class OrderHistoryPage extends StatefulWidget {
  const OrderHistoryPage({super.key});

  @override
  State<OrderHistoryPage> createState() => _OrderHistoryPageState();
}

class _OrderHistoryPageState extends State<OrderHistoryPage> {
  final OrderController _controller = OrderController();
  final ScrollController _scrollController = ScrollController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              children: [
                Expanded(
                  child: Text(
                    'Completed Orders',
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                ),
                Text('Actions', style: Theme.of(context).textTheme.titleLarge),
              ],
            ),
          ),
          Expanded(
            child: StreamBuilder<List<Order>>(
              stream: _controller.getOrdersByStatus('completed'),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(
                    child: GradientCircularProgressIndicator(),
                  );
                }
                if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));
                }
                if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return const Center(
                    child: Text('No completed orders found.'),
                  );
                }
                final orders = snapshot.data!;
                return ListView.builder(
                  controller: _scrollController,
                  itemCount: orders.length,
                  itemBuilder: (context, index) {
                    final order = orders[index];
                    return Container(
                      margin: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 4,
                      ),
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [Colors.red[50]!, Colors.orange[50]!],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Row(
                          children: [
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    "Order #${order.orderId.toString()}",
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                  Text(order.name),
                                  Text(
                                    'Completed: ${DateFormat('MMM dd, yyyy hh:mm a').format(order.createdAt)}',
                                  ),
                                ],
                              ),
                            ),
                            IconButton(
                              icon: GradientIcon(
                                icon: Icons.visibility,
                                offset: Offset.zero,
                                gradient: LinearGradient(
                                  colors: GradientColorSets.set1,
                                ),
                              ),
                              onPressed: () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) =>
                                        OrderDetailsPage(order: order),
                                  ),
                                );
                              },
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }
}

// END OF FILE for pages\cashier\order_history_page.dart


// START | FILE: pages\cashier\payment_page.dart
// pages/cashier/payment_page.dart
import 'package:bbqlagao_and_beefpares/widgets/gradient_button.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:flutter/material.dart';
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:bbqlagao_and_beefpares/controllers/general/payment_controller.dart';
import 'package:bbqlagao_and_beefpares/models/payment.dart';
import 'package:bbqlagao_and_beefpares/models/order.dart';
import 'package:bbqlagao_and_beefpares/controllers/general/order_controller.dart';

class PaymentPage extends StatefulWidget {
  final Order order;
  final double totalAmount;

  const PaymentPage({
    super.key,
    required this.order,
    required this.totalAmount,
  });

  @override
  State<PaymentPage> createState() => _PaymentPageState();
}

class _PaymentPageState extends State<PaymentPage> {
  final PaymentController _paymentController = PaymentController();
  final OrderController _orderController = OrderController();
  final _formKey = GlobalKey<FormState>();
  String _paymentType = 'Cash';
  String _provider = 'GCash';
  final _nameCtrl = TextEditingController(text: 'Customer');
  final _userAmountCtrl = TextEditingController();
  final _mobileCtrl = TextEditingController();
  final _refCtrl = TextEditingController();
  double _change = 0.0;
  bool _isProcessing = false;

  @override
  void initState() {
    super.initState();
    _userAmountCtrl.text = widget.totalAmount.toStringAsFixed(2);
    _userAmountCtrl.addListener(_updateChange);
    _updateChange();
  }

  void _updateChange() {
    final userAmount = double.tryParse(_userAmountCtrl.text) ?? 0.0;
    setState(() {
      _change = (userAmount - widget.totalAmount).clamp(0.0, double.infinity);
    });
  }

  @override
  Widget build(BuildContext context) {
    final isCash = _paymentType == 'Cash';
    return Scaffold(
      appBar: AppBar(
        title: const Text('Payment'),
        backgroundColor: Colors.redAccent,
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text('Payment Type'),
              DropdownButtonFormField<String>(
                initialValue: _paymentType,
                items: ['Cash', 'E-Payment']
                    .map((t) => DropdownMenuItem(value: t, child: Text(t)))
                    .toList(),
                onChanged: (value) {
                  setState(() {
                    _paymentType = value!;
                  });
                },
              ),
              const SizedBox(height: 16),
              Text(
                'Total Amount: ₱${widget.totalAmount.toStringAsFixed(2)}',
                style: Theme.of(context).textTheme.titleMedium,
              ),
              const SizedBox(height: 16),
              if (isCash) ...[
                const Text('Name'),
                TextFormField(
                  controller: _nameCtrl,
                  decoration: const InputDecoration(),
                  validator: (value) =>
                      value!.isEmpty ? 'Name is required' : null,
                ),
                const Text('User Amount'),
                TextFormField(
                  controller: _userAmountCtrl,
                  keyboardType: TextInputType.number,
                  decoration: const InputDecoration(),
                  validator: (value) {
                    final amount = double.tryParse(value!);
                    if (amount == null) return 'Invalid amount';
                    if (amount < widget.totalAmount)
                      return 'Insufficient amount';
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                Text(
                  'Change: ₱${_change.toStringAsFixed(2)}',
                  style: Theme.of(context).textTheme.titleMedium,
                ),
              ] else ...[
                const Text('Payment Provider'),
                DropdownButtonFormField<String>(
                  initialValue: _provider,
                  items: ['GCash']
                      .map((p) => DropdownMenuItem(value: p, child: Text(p)))
                      .toList(),
                  onChanged: (value) => setState(() => _provider = value!),
                ),
                const Text('Mobile Number'),
                TextFormField(
                  controller: _mobileCtrl,
                  keyboardType: TextInputType.phone,
                  decoration: const InputDecoration(),
                  validator: (value) =>
                      value!.isEmpty ? 'Mobile number is required' : null,
                ),
                const Text('Reference Number'),
                TextFormField(
                  controller: _refCtrl,
                  decoration: const InputDecoration(),
                  validator: (value) =>
                      value!.isEmpty ? 'Reference number is required' : null,
                ),
              ],
            ],
          ),
        ),
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.end,
          children: [
            if (!_isProcessing)
              OutlinedButton(
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.orange,
                  side: const BorderSide(color: Colors.orange),
                ),
                onPressed: () => Navigator.pop(context, false),
                child: const Text('Back'),
              ),
            const SizedBox(width: 8),
            if (!_isProcessing)
              GradientButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    setState(() {
                      _isProcessing = true;
                    });
                    final paymentDetails = isCash
                        ? {
                            'name': _nameCtrl.text,
                            'userAmount': double.parse(_userAmountCtrl.text),
                            'change': _change,
                            'totalAmount': widget.totalAmount,
                          }
                        : {
                            'provider': _provider,
                            'mobileNumber': _mobileCtrl.text,
                            'referenceNumber': _refCtrl.text,
                            'totalAmount': widget.totalAmount,
                          };
                    final payment = Payment(
                      orderId: widget.order.orderId,
                      paymentMethod: _paymentType,
                      paymentDetails: paymentDetails,
                    );
                    await _paymentController.addPayment(payment);
                    await _orderController.addOrder(widget.order);
                    if (mounted)
                      Navigator.popUntil(context, (route) => route.isFirst);
                    setState(() {
                      _isProcessing = false;
                    });
                  }
                },
                child: Text(
                  'Confirm Payment',
                  style: TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              )
            else
              const GradientCircularProgressIndicator(),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _nameCtrl.dispose();
    _userAmountCtrl.removeListener(_updateChange);
    _userAmountCtrl.dispose();
    _mobileCtrl.dispose();
    _refCtrl.dispose();
    super.dispose();
  }
}

// END OF FILE for pages\cashier\payment_page.dart


// START | FILE: pages\cashier\preparing_tab_page.dart
//preparing_tab_page.dart
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:flutter/material.dart';
import 'package:bbqlagao_and_beefpares/controllers/general/order_controller.dart';
import 'package:bbqlagao_and_beefpares/models/order.dart';
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:gradient_icon/gradient_icon.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/order_details_page.dart';

class PreparingTabPage extends StatelessWidget {
  const PreparingTabPage({super.key});

  @override
  Widget build(BuildContext context) {
    final OrderController _controller = OrderController();
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            children: [
              Expanded(
                child: Text(
                  'Preparing',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
              ),
              Text('Actions', style: Theme.of(context).textTheme.titleLarge),
            ],
          ),
        ),
        Expanded(
          child: StreamBuilder<List<Order>>(
            stream: _controller.getOrdersByStatus('preparing'),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: GradientCircularProgressIndicator());
              }
              if (snapshot.hasError) {
                return Center(child: Text('Error: ${snapshot.error}'));
              }
              if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return const Center(child: Text('No preparing orders found.'));
              }
              final orders = snapshot.data!;
              return ListView.builder(
                itemCount: orders.length,
                itemBuilder: (context, index) {
                  final order = orders[index];
                  return Container(
                    margin: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [Colors.red[50]!, Colors.orange[50]!],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Order #${order.orderId.toString()}",
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                Text(order.name),
                                Text('Dine-in'),
                              ],
                            ),
                          ),
                          Row(
                            children: [
                              IconButton(
                                icon: GradientIcon(
                                  offset: Offset.zero,
                                  icon: Icons.restaurant,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set1,
                                  ),
                                ),
                                onPressed: () async {
                                  try {
                                    await _controller.updateOrderStatus(order.id!, 'serving');
                                    Toast.show('Order set to serving');
                                  } catch (e) {
                                    Toast.show('Error: $e');
                                  }
                                },
                              ),
                              IconButton(
                                icon: GradientIcon(
                                  offset: Offset.zero,
                                  icon: Icons.visibility,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set2,
                                  ),
                                ),
                                onPressed: () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => OrderDetailsPage(order: order),
                                    ),
                                  );
                                },
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ),
      ],
    );
  }
}
// END OF FILE for pages\cashier\preparing_tab_page.dart


// START | FILE: pages\cashier\serving_tab_page.dart
//serving_tab_page.dart
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:flutter/material.dart';
import 'package:bbqlagao_and_beefpares/controllers/general/order_controller.dart';
import 'package:bbqlagao_and_beefpares/models/order.dart';
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:gradient_icon/gradient_icon.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/order_details_page.dart';

class ServingTabPage extends StatelessWidget {
  const ServingTabPage({super.key});

  @override
  Widget build(BuildContext context) {
    final OrderController _controller = OrderController();
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            children: [
              Expanded(
                child: Text(
                  'Serving',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
              ),
              Text('Actions', style: Theme.of(context).textTheme.titleLarge),
            ],
          ),
        ),
        Expanded(
          child: StreamBuilder<List<Order>>(
            stream: _controller.getOrdersByStatus('serving'),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: GradientCircularProgressIndicator());
              }
              if (snapshot.hasError) {
                return Center(child: Text('Error: ${snapshot.error}'));
              }
              if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return const Center(child: Text('No serving orders found.'));
              }
              final orders = snapshot.data!;
              return ListView.builder(
                itemCount: orders.length,
                itemBuilder: (context, index) {
                  final order = orders[index];
                  return Container(
                    margin: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [Colors.red[50]!, Colors.orange[50]!],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Order #${order.orderId.toString()}",
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                Text(order.name),
                                Text('Dine-in'),
                              ],
                            ),
                          ),
                          Row(
                            children: [
                              IconButton(
                                icon: GradientIcon(
                                  icon: Icons.check,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set1,
                                  ),
                                  offset: Offset.zero,
                                ),
                                onPressed: () async {
                                  try {
                                    await _controller.updateOrderStatus(order.id!, 'completed');
                                    Toast.show('Order completed');
                                  } catch (e) {
                                    Toast.show('Error: $e');
                                  }
                                },
                              ),
                              IconButton(
                                icon: GradientIcon(
                                  icon: Icons.visibility,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set3,
                                  ),
                                  offset: Offset.zero,
                                ),
                                onPressed: () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => OrderDetailsPage(order: order),
                                    ),
                                  );
                                },
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ),
      ],
    );
  }
}
// END OF FILE for pages\cashier\serving_tab_page.dart


// START | FILE: pages\manager\category_page.dart
//pages/manager/category_page.dart
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:flutter/material.dart';
import 'package:bbqlagao_and_beefpares/models/category.dart';
import 'package:bbqlagao_and_beefpares/controllers/manager/category_controller.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_button.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:gradient_icon/gradient_icon.dart';

class CategoryPage extends StatefulWidget {
  final Function(bool)? onFabVisibilityChanged;

  const CategoryPage({super.key, this.onFabVisibilityChanged});

  @override
  State<CategoryPage> createState() => _CategoryPageState();
}

class _CategoryPageState extends State<CategoryPage> {
  final CategoryController _controller = CategoryController();
  final ScrollController _scrollController = ScrollController();
  final ValueNotifier<bool> _showFabNotifier = ValueNotifier<bool>(true);

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_scrollListener);
    widget.onFabVisibilityChanged?.call(true);
  }

  void _scrollListener() {
    if (_scrollController.offset > 0) {
      _showFabNotifier.value = false;
      widget.onFabVisibilityChanged?.call(false);
    } else {
      _showFabNotifier.value = true;
      widget.onFabVisibilityChanged?.call(true);
    }
  }

  Future<void> _showCategoryDialog({String? id, String? initialName}) async {
    final isEdit = id != null;
    final nameCtrl = TextEditingController(text: initialName ?? '');
    bool isSaving = false;

    await showDialog(
      context: context,
      barrierDismissible: false, // Prevent closing by tapping outside
      builder: (BuildContext dialogContext) => StatefulBuilder(
        builder: (BuildContext context, StateSetter setState) => AlertDialog(
          title: Text(isEdit ? 'Edit Category' : 'New Category'),
          content: TextField(
            controller: nameCtrl,
            decoration: const InputDecoration(labelText: 'Category Name'),
            enabled: !isSaving, // Disable input while saving
          ),
          actions: [
            if (!isSaving) // Only show buttons when not saving
              OutlinedButton(
                style: OutlinedButton.styleFrom(
                  side: const BorderSide(color: Colors.orangeAccent),
                ),
                onPressed: () {
                  nameCtrl.dispose(); // Dispose before popping
                  Navigator.pop(dialogContext);
                },
                child: const Text(
                  'Cancel',
                  style: TextStyle(color: Colors.orangeAccent),
                ),
              ),
            if (!isSaving)
              GradientButton(
                onPressed: () async {
                  final name = nameCtrl.text.trim();
                  if (name.isEmpty) {
                    Toast.show('Name is required');
                    return;
                  }

                  // Update UI to show loading state
                  setState(() => isSaving = true);

                  try {
                    final cat = Category(name: name);
                    if (isEdit) {
                      await _controller.updateCategory(id, cat);
                    } else {
                      await _controller.addCategory(cat);
                    }

                    if (!context.mounted) return;
                    nameCtrl.dispose(); // Dispose before popping
                    Navigator.pop(dialogContext);
                  } catch (e) {
                    if (!context.mounted) return;
                    Toast.show('Error: ${e.toString()}');
                    // Re-enable buttons on error
                    setState(() => isSaving = false);
                  }
                },
                child: const Text(
                  'Save',
                  style: TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            if (isSaving)
              const Padding(
                padding: EdgeInsets.all(8.0),
                child: GradientCircularProgressIndicator(),
              ),
          ],
        ),
      ),
    );
  }

  Future<void> _confirmDelete(String id) async {
    final confirm = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Category'),
        content: const Text('Are you sure you want to delete this category?'),
        actions: [
          OutlinedButton(
            style: OutlinedButton.styleFrom(
              side: const BorderSide(color: Colors.orangeAccent),
            ),
            onPressed: () => Navigator.pop(context, false),
            child: const Text(
              'No',
              style: TextStyle(color: Colors.orangeAccent),
            ),
          ),
          GradientButton(
            onPressed: () => Navigator.pop(context, true),
            child: const Text('Yes', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );

    if (confirm == true) {
      try {
        await _controller.deleteCategory(id);
      } catch (e) {
        Toast.show('Error: ${e.toString()}');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      floatingActionButton: ValueListenableBuilder<bool>(
        valueListenable: _showFabNotifier,
        builder: (context, isVisible, child) {
          return Visibility(
            visible: isVisible,
            child: FloatingActionButton(
              backgroundColor: Colors.redAccent[100],
              foregroundColor: Colors.white,
              shape: const CircleBorder(),
              onPressed: () => _showCategoryDialog(),
              child: const Icon(Icons.add),
            ),
          );
        },
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              children: [
                Expanded(
                  child: Text(
                    'Category Name',
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                ),
                Text('Actions', style: Theme.of(context).textTheme.titleLarge),
              ],
            ),
          ),
          Expanded(
            child: StreamBuilder<List<Category>>(
              stream: _controller.getCategories,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(
                    child: GradientCircularProgressIndicator(),
                  );
                }
                if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return const Center(child: Text('No categories found.'));
                }
                final categories = snapshot.data!;
                return ListView.builder(
                  controller: _scrollController,
                  itemCount: categories.length,
                  itemBuilder: (context, index) {
                    final cat = categories[index];
                    return Container(
                      margin: EdgeInsetsGeometry.symmetric(
                        horizontal: 10,
                        vertical: 3,
                      ),
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: LightGradientColorSets.set1,
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ),
                        borderRadius: BorderRadius.circular(8),
                      ),

                      child: Padding(
                        padding: EdgeInsetsGeometry.symmetric(horizontal: 0),

                        child: ListTile(
                          title: Text(cat.name),
                          trailing: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              IconButton(
                                icon: GradientIcon(
                                  icon: Icons.edit,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set3,
                                  ),
                                  offset: Offset.zero,
                                ),
                                onPressed: () => _showCategoryDialog(
                                  id: cat.id,
                                  initialName: cat.name,
                                ),
                                tooltip: "Edit Category",
                              ),
                              IconButton(
                                icon: GradientIcon(
                                  icon: Icons.delete,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set2,
                                  ),
                                  offset: Offset.zero,
                                ),
                                onPressed: () => _confirmDelete(cat.id!),
                              ),
                            ],
                          ),
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _showFabNotifier.dispose();
    _scrollController.removeListener(_scrollListener);
    _scrollController.dispose();
    super.dispose();
  }
}

// END OF FILE for pages\manager\category_page.dart


// START | FILE: pages\manager\inventory_page.dart
// inventory_page.dart
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_button.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:bbqlagao_and_beefpares/controllers/manager/inventory_controller.dart';
import 'package:bbqlagao_and_beefpares/models/item.dart';
import 'package:gradient_icon/gradient_icon.dart';
import 'modify_item_page.dart';

class InventoryPage extends StatefulWidget {
  final Function(bool)? onFabVisibilityChanged;

  const InventoryPage({super.key, this.onFabVisibilityChanged});

  @override
  State<InventoryPage> createState() => _InventoryPageState();
}

class _InventoryPageState extends State<InventoryPage> {
  final ScrollController _scrollController = ScrollController();
  final InventoryController _controller = InventoryController();

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_scrollListener);
  }

  void _scrollListener() {
    final visible =
        _scrollController.position.userScrollDirection !=
        ScrollDirection.reverse;
    if (widget.onFabVisibilityChanged != null) {
      widget.onFabVisibilityChanged!(visible);
    }
  }

  void _showDeleteDialog(Item item) {
    bool isDeleting = false;
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: const Text('Confirm Delete'),
              content: Text('Are you sure you want to delete ${item.name}?'),
              actions: <Widget>[
                if (!isDeleting)
                  OutlinedButton(
                    style: OutlinedButton.styleFrom(
                      side: const BorderSide(color: Colors.orangeAccent),
                      foregroundColor: Colors.orangeAccent,
                    ),
                    child: const Text('Cancel'),
                    onPressed: () {
                      Navigator.of(context).pop();
                    },
                  ),
                if (!isDeleting)
                  GradientButton(
                    colors: GradientColorSets.set2,
                    child: const Text(
                      'Delete',
                      style: TextStyle(color: Colors.white),
                    ),
                    onPressed: () async {
                      setState(() => isDeleting = true);
                      try {
                        await _controller.deleteItem(item.id!);
                      } catch (e) {
                        if (context.mounted) {
                          Toast.show('Error deleting: $e');
                        }
                        setState(() => isDeleting = false);
                        return;
                      }
                      if (context.mounted) {
                        Navigator.of(context).pop();
                      }
                    },
                  ),
                if (isDeleting) const GradientCircularProgressIndicator(),
              ],
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            children: [
              Expanded(
                child: Text(
                  'Item Name',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
              ),
              Text('Actions', style: Theme.of(context).textTheme.titleLarge),
            ],
          ),
        ),
        Expanded(
          child: StreamBuilder<List<Item>>(
            stream: _controller.getItems,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: GradientCircularProgressIndicator());
              }
              if (snapshot.hasError) {
                return Center(child: Text('Error: ${snapshot.error}'));
              }
              if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return const Center(child: Text('No inventory items found.'));
              }
              final items = snapshot.data!;
              return ListView.builder(
                controller: _scrollController,
                itemCount: items.length,
                itemBuilder: (context, index) {
                  final item = items[index];
                  return Container(
                    margin: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [Colors.red[50]!, Colors.orange[50]!],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Row(
                        children: [
                          SizedBox(
                            width: 60,
                            height: 60,
                            child: item.imageUrl != null
                                ? ClipRRect(
                                    borderRadius: BorderRadius.circular(8),
                                    child: Image.network(
                                      item.imageUrl!,
                                      fit: BoxFit.cover,
                                      errorBuilder:
                                          (context, error, stackTrace) =>
                                              const Icon(
                                                Icons.image_not_supported,
                                                size: 60,
                                              ),
                                    ),
                                  )
                                : const Icon(
                                    Icons.image_not_supported,
                                    size: 60,
                                  ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  item.name,
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                const SizedBox(height: 4),
                                Text(
                                  'Quantity: ${item.quantity}',
                                  style: TextStyle(
                                    fontSize: 12,
                                    color: Colors.grey[600],
                                  ),
                                ),
                              ],
                            ),
                          ),
                          Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              IconButton(
                                icon: GradientIcon(
                                  icon: Icons.edit,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set2,
                                  ),
                                  offset: Offset.zero,
                                ),
                                onPressed: () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => ModifyItemPage(
                                        itemId: item.id,
                                        item: item,
                                      ),
                                    ),
                                  );
                                },
                                tooltip: "Edit Item",
                              ),
                              IconButton(
                                icon: GradientIcon(
                                  icon: Icons.delete,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set2,
                                  ),
                                  offset: Offset.zero,
                                ),
                                onPressed: () => _showDeleteDialog(item),
                                tooltip: "Delete Item",
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ),
      ],
    );
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }
}
// END OF FILE for pages\manager\inventory_page.dart


// START | FILE: pages\manager\menu_page.dart
// menu_page.dart
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_button.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:flutter/material.dart' hide MenuController;
import 'package:flutter/rendering.dart';
import 'package:gradient_icon/gradient_icon.dart';
import '../../controllers/manager/menu_controller.dart';
import '../../models/dish.dart';
import 'modify_dish_page.dart';

class MenuPage extends StatefulWidget {
  final Function(bool)? onFabVisibilityChanged;

  const MenuPage({super.key, this.onFabVisibilityChanged});

  @override
  State<MenuPage> createState() => _MenuPageState();
}

class _MenuPageState extends State<MenuPage> {
  final ScrollController _scrollController = ScrollController();
  final MenuController _controller = MenuController();

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_scrollListener);
  }

  void _scrollListener() {
    final visible =
        _scrollController.position.userScrollDirection !=
        ScrollDirection.reverse;
    if (widget.onFabVisibilityChanged != null) {
      widget.onFabVisibilityChanged!(visible);
    }
  }

  void _showDeleteDialog(Dish dish) {
    bool isDeleting = false;
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: const Text('Confirm Delete'),
              content: Text('Are you sure you want to delete ${dish.name}?'),
              actions: <Widget>[
                if (!isDeleting)
                  OutlinedButton(
                    style: OutlinedButton.styleFrom(
                      side: const BorderSide(color: Colors.orangeAccent),
                      foregroundColor: Colors.orangeAccent,
                    ),
                    child: const Text(
                      'Cancel',
                      style: TextStyle(color: Colors.orange),
                    ),
                    onPressed: () {
                      Navigator.of(context).pop();
                    },
                  ),
                if (!isDeleting)
                  GradientButton(
                    colors: GradientColorSets.set2,
                    child: const Text(
                      'Delete',
                      style: TextStyle(color: Colors.white),
                    ),
                    onPressed: () async {
                      setState(() => isDeleting = true);
                      try {
                        await _controller.deleteDish(dish.id!);
                      } catch (e) {
                        if (context.mounted) {
                          Toast.show('Error deleting: $e');
                        }
                        setState(() => isDeleting = false);
                        return;
                      }
                      if (context.mounted) {
                        Navigator.of(context).pop();
                      }
                    },
                  ),
                if (isDeleting) const GradientCircularProgressIndicator(),
              ],
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            children: [
              Expanded(
                child: Text(
                  'Dish Name',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
              ),
              Text('Actions', style: Theme.of(context).textTheme.titleLarge),
            ],
          ),
        ),
        Expanded(
          child: StreamBuilder<List<Dish>>(
            stream: _controller.getDishes,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: GradientCircularProgressIndicator());
              }
              if (snapshot.hasError) {
                return Center(child: Text('Error: ${snapshot.error}'));
              }
              if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return const Center(child: Text('No menu items found.'));
              }
              final dishes = snapshot.data!;
              return ListView.builder(
                controller: _scrollController,
                itemCount: dishes.length,
                itemBuilder: (context, index) {
                  final dish = dishes[index];
                  return Container(
                    margin: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [Colors.red[50]!, Colors.orange[50]!],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Row(
                        children: [
                          SizedBox(
                            width: 60,
                            height: 60,
                            child: dish.imageUrl != null
                                ? ClipRRect(
                                    borderRadius: BorderRadius.circular(8),
                                    child: Image.network(
                                      dish.imageUrl!,
                                      fit: BoxFit.cover,
                                      errorBuilder:
                                          (context, error, stackTrace) =>
                                              const Icon(
                                                Icons.image_not_supported,
                                                size: 60,
                                              ),
                                    ),
                                  )
                                : const Icon(
                                    Icons.image_not_supported,
                                    size: 60,
                                  ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  dish.name,
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                Text(
                                  '₱${dish.price.toStringAsFixed(2)}',
                                  style: const TextStyle(fontSize: 16),
                                ),
                                Text(
                                  'Visible: ${dish.isVisible ? 'True' : 'False'}',
                                ),
                                Text(
                                  'Available: ${dish.isAvailable ? 'True' : 'False'}',
                                ),
                              ],
                            ),
                          ),
                          Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              IconButton(
                                icon: GradientIcon(
                                  icon: Icons.edit,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set2,
                                  ),
                                  offset: Offset.zero,
                                ),
                                onPressed: () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => ModifyDishPage(
                                        dishId: dish.id,
                                        dish: dish,
                                      ),
                                    ),
                                  );
                                },
                                tooltip: "Edit Menu",
                              ),
                              IconButton(
                                icon: GradientIcon(
                                  icon: Icons.delete,
                                  gradient: LinearGradient(
                                    colors: GradientColorSets.set2,
                                  ),
                                  offset: Offset.zero,
                                ),
                                onPressed: () => _showDeleteDialog(dish),
                                tooltip: "Delete Menu",
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ),
      ],
    );
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }
}

// END OF FILE for pages\manager\menu_page.dart


// START | FILE: pages\manager\modify_dish_page.dart
//pages/manager/modify_dish_page.dart
import 'package:bbqlagao_and_beefpares/controllers/manager/inventory_controller.dart';
import 'package:bbqlagao_and_beefpares/controllers/manager/menu_controller.dart';
import 'package:bbqlagao_and_beefpares/controllers/manager/category_controller.dart';
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_button.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart' hide MenuController;
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_checkbox.dart';
import 'package:gradient_icon/gradient_icon.dart';
import '../../models/dish.dart';
import '../../models/item.dart';
import '../../models/category.dart';

class ModifyDishPage extends StatefulWidget {
  final String? dishId;
  final Dish? dish;

  const ModifyDishPage({super.key, this.dishId, this.dish});

  @override
  State<ModifyDishPage> createState() => _ModifyDishPageState();
}

class _ModifyDishPageState extends State<ModifyDishPage> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameCtrl;
  late TextEditingController _descCtrl;
  late TextEditingController _priceCtrl;
  late TextEditingController _imageUrlCtrl;
  late bool _isVisible;
  final MenuController _menuController = MenuController();
  final InventoryController _inventoryController = InventoryController();
  List<Map<String, dynamic>> _selectedIngredients = [];
  List<Map<String, dynamic>> _selectedCategories = [];
  double _price = 0.0;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _nameCtrl = TextEditingController(text: widget.dish?.name ?? '');
    _descCtrl = TextEditingController(text: widget.dish?.description ?? '');
    _priceCtrl = TextEditingController(
      text: widget.dish?.price.toStringAsFixed(2) ?? '0.00',
    );
    _imageUrlCtrl = TextEditingController(text: widget.dish?.imageUrl ?? '');
    _isVisible = widget.dish?.isVisible ?? true;
    _price = widget.dish?.price ?? 0.0;
    if (widget.dish != null) {
      _selectedIngredients = List<Map<String, dynamic>>.from(
        widget.dish!.ingredients
            .where((ing) => ing['itemId'] != null)
            .map((ing) => {'id': ing['itemId'], 'quantity': ing['quantity']}),
      );
      _selectedCategories = List<Map<String, dynamic>>.from(
        widget.dish!.categories
            .where((cat) => cat['categoryId'] != null)
            .map(
              (cat) => {'id': cat['categoryId'], 'name': cat['categoryName']},
            ),
      );
      _loadIngredientNames();
    }
  }

  Future<void> _loadIngredientNames() async {
    final List<Map<String, dynamic>> updated = [];
    for (final ing in _selectedIngredients) {
      if (ing['id'] == null) continue;
      final doc = await FirebaseFirestore.instance
          .collection('inventory')
          .doc(ing['id'])
          .get();
      if (doc.exists) {
        final data = doc.data()!;
        updated.add({
          'id': ing['id'],
          'name': data['name'] ?? 'Unknown',
          'quantity': ing['quantity'],
        });
      } else {
        if (mounted) {
          Toast.show('Item Unavailable/Deleted');
        }
      }
    }
    if (mounted) {
      setState(() {
        _selectedIngredients = updated;
      });
    }
  }

  void _incrementPrice() {
    setState(() {
      _price += 0.01;
      _priceCtrl.text = _price.toStringAsFixed(2);
    });
  }

  void _decrementPrice() {
    if (_price > 0) {
      setState(() {
        _price -= 0.01;
        _priceCtrl.text = _price.toStringAsFixed(2);
      });
    }
  }

  void _addIngredient() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => _IngredientSelectionBottomSheet(
        inventoryController: _inventoryController,
        selectedIngredientIds: _selectedIngredients
            .map((ing) => ing['id'] as String)
            .toSet(),
        onAdd: (newIngredients) {
          setState(() {
            _selectedIngredients.addAll(newIngredients);
          });
        },
      ),
    );
  }

  void _addCategories() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => _CategorySelectionBottomSheet(
        selectedCategories: _selectedCategories,
        onSave: (selected) {
          setState(() {
            _selectedCategories = selected;
          });
        },
      ),
    );
  }

  void _updateIngredientQuantity(String id, int newQuantity) {
    setState(() {
      final index = _selectedIngredients.indexWhere((ing) => ing['id'] == id);
      if (index != -1 && newQuantity >= 0) {
        _selectedIngredients[index]['quantity'] = newQuantity;
      }
    });
  }

  void _removeIngredient(String id) {
    setState(() {
      _selectedIngredients.removeWhere((ing) => ing['id'] == id);
    });
  }

  Future<bool> _computeAvailability() async {
    for (final ing in _selectedIngredients) {
      if (ing['id'] == null) return false;
      final doc = await FirebaseFirestore.instance
          .collection('inventory')
          .doc(ing['id'])
          .get();
      if (!doc.exists || (doc.data()?['quantity'] ?? 0) < ing['quantity']) {
        return false;
      }
    }
    return true;
  }

  Widget _buildImagePreview() {
    if (_imageUrlCtrl.text.isEmpty) return const SizedBox.shrink();
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(8),
        child: Image.network(
          _imageUrlCtrl.text,
          height: 200,
          fit: BoxFit.cover,
          errorBuilder: (context, error, stackTrace) => const Icon(Icons.error),
        ),
      ),
    );
  }

  Widget _buildIngredientsList() {
    return SizedBox(
      height: 200,
      child: SingleChildScrollView(
        child: ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: _selectedIngredients.length,
          itemBuilder: (context, index) {
            final ing = _selectedIngredients[index];
            return Card(
              color: Colors.orange[50],
              child: ListTile(
                title: Text(ing['name'] ?? 'Unknown'),
                subtitle: Text('Quantity: ${ing['quantity']}'),
                trailing: Row(
                  mainAxisSize: MainAxisSize.min,

                  children: [
                    IconButton(
                      icon: const Icon(Icons.remove),
                      onPressed: () => _updateIngredientQuantity(
                        ing['id'],
                        (ing['quantity'] as int) - 1,
                      ),
                    ),
                    Text('${ing['quantity']}'),
                    IconButton(
                      icon: const Icon(Icons.add),
                      onPressed: () => _updateIngredientQuantity(
                        ing['id'],
                        (ing['quantity'] as int) + 1,
                      ),
                    ),
                    IconButton(
                      icon: GradientIcon(
                        icon: Icons.delete,
                        gradient: LinearGradient(
                          colors: GradientColorSets.set2,
                        ),
                        offset: Offset.zero,
                      ),
                      onPressed: () => _removeIngredient(ing['id']),
                    ),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final title = widget.dishId != null ? 'Edit Dish' : 'New Dish';
    final buttonText = widget.dishId != null ? 'Update Dish' : 'Add Dish';
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(title: Text(title)),
      body: Stack(
        children: [
          SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    TextFormField(
                      controller: _nameCtrl,
                      decoration: const InputDecoration(labelText: 'Name'),
                      validator: (value) => value!.isEmpty ? 'Required' : null,
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _descCtrl,
                      decoration: const InputDecoration(
                        labelText: 'Description',
                      ),
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        IconButton(
                          icon: const Icon(Icons.remove),
                          onPressed: _decrementPrice,
                        ),
                        Expanded(
                          child: TextFormField(
                            controller: _priceCtrl,
                            decoration: const InputDecoration(
                              labelText: 'Price',
                            ),
                            keyboardType: TextInputType.number,
                            onChanged: (val) {
                              _price = double.tryParse(val) ?? 0.0;
                            },
                          ),
                        ),
                        IconButton(
                          icon: const Icon(Icons.add),
                          onPressed: _incrementPrice,
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _imageUrlCtrl,
                      decoration: const InputDecoration(labelText: 'Image URL'),
                    ),
                    _buildImagePreview(),
                    const SizedBox(height: 16),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        Expanded(
                          child: GradientButton(
                            onPressed: _addCategories,
                            child: const Text(
                              'Select Categories',
                              style: TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: GradientButton(
                            onPressed: _addIngredient,
                            child: const Text(
                              'Add Ingredients',
                              style: TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    _buildIngredientsList(),
                    const SizedBox(height: 16),
                  ],
                ),
              ),
            ),
          ),
          if (_isLoading)
            const Center(child: GradientCircularProgressIndicator()),
        ],
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                GradientCheckbox(
                  value: _isVisible,
                  onChanged: (val) => setState(() => _isVisible = val!),
                ),
                const Text('Visible to Customers'),
              ],
            ),
            GradientButton(
              onPressed: () async {
                if (_formKey.currentState!.validate() && !_isLoading) {
                  setState(() => _isLoading = true);
                  try {
                    final available = await _computeAvailability();
                    final ingredientsForSave = _selectedIngredients
                        .map(
                          (ing) => {
                            'itemId': ing['id'],
                            'quantity': ing['quantity'] ?? 1,
                          },
                        )
                        .toList();
                    final categoriesForSave = _selectedCategories
                        .map(
                          (cat) => {
                            'categoryId': cat['id'],
                            'categoryName': cat['name'],
                          },
                        )
                        .toList();
                    final newDish = Dish(
                      name: _nameCtrl.text,
                      description: _descCtrl.text.isEmpty
                          ? null
                          : _descCtrl.text,
                      price: double.parse(_priceCtrl.text),
                      isVisible: _isVisible,
                      isAvailable: available,
                      ingredients: ingredientsForSave,
                      categories: categoriesForSave,
                      imageUrl: _imageUrlCtrl.text.isEmpty
                          ? null
                          : _imageUrlCtrl.text,
                    );
                    if (widget.dishId == null) {
                      await _menuController.addDish(newDish);
                    } else {
                      await _menuController.updateDish(widget.dishId!, newDish);
                    }
                    if (context.mounted) {
                      Navigator.pop(context);
                    }
                  } catch (e) {
                    Toast.show('Error: ${e.toString()}');
                  } finally {
                    if (context.mounted) {
                      setState(() => _isLoading = false);
                    }
                  }
                }
              },
              child: Text(
                buttonText,
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _nameCtrl.dispose();
    _descCtrl.dispose();
    _priceCtrl.dispose();
    _imageUrlCtrl.dispose();
    super.dispose();
  }
}

class _IngredientSelectionBottomSheet extends StatefulWidget {
  final InventoryController inventoryController;
  final Set<String> selectedIngredientIds;
  final Function(List<Map<String, dynamic>>) onAdd;

  const _IngredientSelectionBottomSheet({
    required this.inventoryController,
    required this.selectedIngredientIds,
    required this.onAdd,
  });

  @override
  State<_IngredientSelectionBottomSheet> createState() =>
      _IngredientSelectionBottomSheetState();
}

class _IngredientSelectionBottomSheetState
    extends State<_IngredientSelectionBottomSheet> {
  String _searchText = '';
  final List<Map<String, dynamic>> _selectedIngredients = [];

  bool _isSelected(Item item) {
    // Check both currently selected and already added ingredients
    return _selectedIngredients.any((m) => m['id'] == item.id) ||
        widget.selectedIngredientIds.contains(item.id);
  }

  @override
  Widget build(BuildContext context) {
    return DraggableScrollableSheet(
      initialChildSize: 0.8,
      minChildSize: 0.5,
      maxChildSize: 0.95,
      expand: false,
      builder: (context, scrollController) => Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              onChanged: (val) =>
                  setState(() => _searchText = val.toLowerCase()),
              decoration: const InputDecoration(
                labelText: 'Search Ingredients',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.search),
              ),
            ),
          ),
          Expanded(
            child: StreamBuilder<List<Item>>(
              stream: widget.inventoryController.getItems,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(
                    child: GradientCircularProgressIndicator(),
                  );
                }
                if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return const Center(child: Text('No ingredients available.'));
                }
                final availableIngredients = snapshot.data!.where((item) {
                  // Filter out items that are already selected in the main ingredient list
                  final alreadyAdded = widget.selectedIngredientIds.contains(
                    item.id,
                  );
                  final matchesSearch = item.name.toLowerCase().contains(
                    _searchText,
                  );
                  return !alreadyAdded && matchesSearch;
                }).toList();
                return ListView.builder(
                  controller: scrollController,
                  itemCount: availableIngredients.length,
                  itemBuilder: (context, index) {
                    final item = availableIngredients[index];
                    final isSelected = _isSelected(item);
                    final alreadyAdded = widget.selectedIngredientIds.contains(
                      item.id,
                    );
                    return ListTile(
                      enabled: !alreadyAdded,
                      leading: GradientCheckbox(
                        value: isSelected,
                        onChanged: alreadyAdded
                            ? null
                            : (val) {
                                setState(() {
                                  if (val!) {
                                    _selectedIngredients.add({
                                      'id': item.id,
                                      'name': item.name,
                                    });
                                  } else {
                                    _selectedIngredients.removeWhere(
                                      (m) => m['id'] == item.id,
                                    );
                                  }
                                });
                              },
                      ),
                      title: Text(item.name),
                      subtitle: Text('Stock: ${item.quantity}'),
                      trailing: item.imageUrl != null
                          ? Image.network(
                              item.imageUrl!,
                              width: 50,
                              height: 50,
                              fit: BoxFit.cover,
                              errorBuilder: (context, error, stackTrace) =>
                                  const Icon(Icons.image_not_supported),
                            )
                          : const Icon(Icons.image_not_supported),
                    );
                  },
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                OutlinedButton(
                  onPressed: () => Navigator.pop(context),
                  style: OutlinedButton.styleFrom(
                    side: const BorderSide(color: Colors.orange),
                  ),
                  child: const Text(
                    'Cancel',
                    style: TextStyle(color: Colors.orange),
                  ),
                ),
                const SizedBox(width: 8),
                GradientButton(
                  onPressed: () {
                    final newIngredients = _selectedIngredients
                        .map(
                          (m) => {
                            'id': m['id'],
                            'name': m['name'],
                            'quantity': 1,
                          },
                        )
                        .toList();
                    widget.onAdd(newIngredients);
                    Navigator.pop(context);
                  },
                  child: const Text(
                    'Add Ingredient',
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class _CategorySelectionBottomSheet extends StatefulWidget {
  final List<Map<String, dynamic>> selectedCategories;
  final Function(List<Map<String, dynamic>>) onSave;

  const _CategorySelectionBottomSheet({
    required this.selectedCategories,
    required this.onSave,
  });

  @override
  State<_CategorySelectionBottomSheet> createState() =>
      _CategorySelectionBottomSheetState();
}

class _CategorySelectionBottomSheetState
    extends State<_CategorySelectionBottomSheet> {
  String _searchText = '';
  late List<Map<String, dynamic>> _currentSelected;
  final CategoryController _categoryController = CategoryController();

  @override
  void initState() {
    super.initState();
    // Create a deep copy of selected categories to avoid modifying original list
    _currentSelected = List.from(
      widget.selectedCategories.map((cat) => Map<String, dynamic>.from(cat)),
    );
  }

  bool _isSelected(String? id) {
    return _currentSelected.any((cat) => cat['id'] == id);
  }

  @override
  Widget build(BuildContext context) {
    return DraggableScrollableSheet(
      initialChildSize: 0.8,
      minChildSize: 0.5,
      maxChildSize: 0.95,
      expand: false,
      builder: (context, scrollController) => Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              onChanged: (val) =>
                  setState(() => _searchText = val.toLowerCase()),
              decoration: const InputDecoration(
                labelText: 'Search Categories',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.search),
              ),
            ),
          ),
          Expanded(
            child: StreamBuilder<List<Category>>(
              stream: _categoryController.getCategories,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(
                    child: GradientCircularProgressIndicator(),
                  );
                }
                if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return const Center(child: Text('No categories available.'));
                }
                final categories = snapshot.data!
                    .where(
                      (cat) => cat.name.toLowerCase().contains(_searchText),
                    )
                    .toList();
                return ListView.builder(
                  controller: scrollController,
                  itemCount: categories.length,
                  itemBuilder: (context, index) {
                    final cat = categories[index];
                    final isSelected = _isSelected(cat.id);
                    return ListTile(
                      leading: GradientCheckbox(
                        value: isSelected,
                        onChanged: (val) {
                          setState(() {
                            if (val!) {
                              _currentSelected.add({
                                'id': cat.id,
                                'name': cat.name,
                              });
                            } else {
                              _currentSelected.removeWhere(
                                (m) => m['id'] == cat.id,
                              );
                            }
                          });
                        },
                      ),
                      title: Text(cat.name),
                    );
                  },
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                OutlinedButton(
                  onPressed: () {
                    // Restore original selection on cancel
                    setState(() {
                      _currentSelected = List.from(
                        widget.selectedCategories.map(
                          (cat) => Map<String, dynamic>.from(cat),
                        ),
                      );
                    });
                    Navigator.pop(context);
                  },
                  style: OutlinedButton.styleFrom(
                    side: const BorderSide(color: Colors.orange),
                  ),
                  child: const Text(
                    'Cancel',
                    style: TextStyle(color: Colors.orange),
                  ),
                ),
                SizedBox(width: 10),
                GradientButton(
                  onPressed: () {
                    // Save the current selection
                    widget.onSave(_currentSelected);
                    Navigator.pop(context);
                  },
                  child: const Text(
                    'Save Categories',
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// END OF FILE for pages\manager\modify_dish_page.dart


// START | FILE: pages\manager\modify_item_page.dart
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_button.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:flutter/material.dart';
import 'package:bbqlagao_and_beefpares/controllers/manager/inventory_controller.dart';
import 'package:bbqlagao_and_beefpares/models/item.dart';

class ModifyItemPage extends StatefulWidget {
  final String? itemId;
  final Item? item;

  const ModifyItemPage({super.key, this.itemId, this.item});

  @override
  State<ModifyItemPage> createState() => _ModifyItemPageState();
}

class _ModifyItemPageState extends State<ModifyItemPage> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameCtrl;
  late TextEditingController _descCtrl;
  late TextEditingController _qtyCtrl;
  late TextEditingController _imageUrlCtrl;
  late String _result;
  int _quantity = 0;
  final InventoryController _controller = InventoryController();
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _nameCtrl = TextEditingController(text: widget.item?.name ?? '');
    _descCtrl = TextEditingController(text: widget.item?.description ?? '');
    _qtyCtrl = TextEditingController(text: '${widget.item?.quantity ?? 0}');
    _imageUrlCtrl = TextEditingController(text: widget.item?.imageUrl ?? '');
    _quantity = widget.item?.quantity ?? 0;
  }

  void _incrementQty() {
    setState(() {
      _quantity++;
      _qtyCtrl.text = _quantity.toString();
    });
  }

  void _decrementQty() {
    if (_quantity > 0) {
      setState(() {
        _quantity--;
        _qtyCtrl.text = _quantity.toString();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final title = widget.itemId != null ? 'Edit Item' : 'New Item';
    final buttonText = widget.itemId != null ? 'Update Item' : 'Add Item';
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(title: Text(title)),
      body: Stack(
        children: [
          SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0).copyWith(bottom: 80.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('Item Name'),
                    TextFormField(
                      controller: _nameCtrl,
                      decoration: const InputDecoration(),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Item name is required';
                        }
                        return null;
                      },
                    ),
                    const Divider(),
                    const Text('Description'),
                    TextFormField(
                      controller: _descCtrl,
                      decoration: const InputDecoration(),
                      maxLines: 5,
                    ),
                    const Divider(),
                    const Text('Quantity'),
                    Row(
                      children: [
                        IconButton(
                          icon: const Icon(Icons.remove),
                          onPressed: _decrementQty,
                        ),
                        Expanded(
                          child: TextFormField(
                            controller: _qtyCtrl,
                            decoration: const InputDecoration(),
                            keyboardType: TextInputType.number,
                            validator: (value) {
                              if (value == null ||
                                  int.tryParse(value) == null) {
                                return 'Please enter a valid number';
                              }
                              return null;
                            },
                          ),
                        ),
                        IconButton(
                          icon: const Icon(Icons.add),
                          onPressed: _incrementQty,
                        ),
                      ],
                    ),
                    const Divider(),
                    const Text('Image URL'),
                    TextFormField(
                      controller: _imageUrlCtrl,
                      decoration: const InputDecoration(),
                    ),
                    const SizedBox(height: 20),
                  ],
                ),
              ),
            ),
          ),
          Align(
            alignment: Alignment.bottomRight,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  !_isLoading
                      ? OutlinedButton(
                          style: OutlinedButton.styleFrom(
                            side: const BorderSide(color: Colors.orangeAccent),
                            foregroundColor: Colors.orangeAccent,
                          ),
                          onPressed: () => Navigator.pop(context),
                          child: const Text('Cancel'),
                        )
                      : const SizedBox.shrink(),
                  const SizedBox(width: 8),
                  _isLoading
                      ? const GradientCircularProgressIndicator()
                      : GradientButton(
                          onPressed: () async {
                            if (_isLoading) return;
                            if (_formKey.currentState!.validate()) {
                              setState(() => _isLoading = true);
                              try {
                                final newItem = Item(
                                  id: widget.itemId ?? '',
                                  name: _nameCtrl.text,
                                  description: _descCtrl.text.isEmpty
                                      ? null
                                      : _descCtrl.text,
                                  quantity: int.parse(_qtyCtrl.text),
                                  imageUrl: _imageUrlCtrl.text.isEmpty
                                      ? null
                                      : _imageUrlCtrl.text,
                                );
                                if (widget.itemId == null) {
                                  await _controller.addItem(newItem);
                                } else {
                                  await _controller.updateItem(
                                    widget.itemId!,
                                    newItem,
                                  );
                                }
                                if (context.mounted) {
                                  Navigator.pop(context);
                                }
                              } catch (e) {
                                Toast.show('Error: ${e.toString()}');
                              } finally {
                                if (context.mounted) {
                                  setState(() => _isLoading = false);
                                }
                              }
                            }
                          },
                          child: Text(
                            buttonText,
                            style: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _nameCtrl.dispose();
    _descCtrl.dispose();
    _qtyCtrl.dispose();
    _imageUrlCtrl.dispose();
    super.dispose();
  }
}

// END OF FILE for pages\manager\modify_item_page.dart


// START | FILE: pages\manager\modify_user_page.dart
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_button.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:flutter/material.dart';
import 'package:bbqlagao_and_beefpares/controllers/manager/users_controller.dart';
import 'package:bbqlagao_and_beefpares/models/user.dart';

class ModifyUserPage extends StatefulWidget {
  final String? userId;
  final User? user;

  const ModifyUserPage({super.key, this.userId, this.user});

  @override
  State<ModifyUserPage> createState() => _ModifyUserPageState();
}

class _ModifyUserPageState extends State<ModifyUserPage> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameCtrl;
  late TextEditingController _emailCtrl;
  late TextEditingController _passwordCtrl;
  late TextEditingController _confirmPasswordCtrl;
  String _role = 'Cashier';
  final UsersController _controller = UsersController();
  bool get isEdit => widget.userId != null;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _nameCtrl = TextEditingController(text: widget.user?.name ?? '');
    _emailCtrl = TextEditingController(text: widget.user?.email ?? '');
    _passwordCtrl = TextEditingController();
    _confirmPasswordCtrl = TextEditingController();
    _role = widget.user?.role ?? 'Cashier';
  }

  @override
  Widget build(BuildContext context) {
    final title = isEdit ? 'Edit Staff' : 'New Staff';
    final buttonText = isEdit ? 'Update Staff' : 'Add Staff';
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(title: Text(title)),
      body: Stack(
        children: [
          SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0).copyWith(bottom: 80.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('Name'),
                    TextFormField(
                      controller: _nameCtrl,
                      validator: (value) =>
                          value!.isEmpty ? 'Name is required' : null,
                    ),
                    const Divider(),
                    if (!isEdit) ...[
                      const Text('Email'),
                      TextFormField(
                        controller: _emailCtrl,
                        keyboardType: TextInputType.emailAddress,
                        validator: (value) =>
                            value!.isEmpty ? 'Email is required' : null,
                      ),
                      const Divider(),
                    ],
                    const Text('Role'),
                    DropdownButtonFormField<String>(
                      value: _role,
                      items: ['Admin', 'Manager', 'Cashier']
                          .map(
                            (r) => DropdownMenuItem(value: r, child: Text(r)),
                          )
                          .toList(),
                      onChanged: (value) => setState(() => _role = value!),
                      validator: (value) =>
                          value == null ? 'Role is required' : null,
                    ),
                    if (!isEdit) ...[
                      const Divider(),
                      const Text('Password'),
                      TextFormField(
                        controller: _passwordCtrl,
                        obscureText: true,
                        validator: (value) =>
                            value!.isEmpty ? 'Password is required' : null,
                      ),
                      const Divider(),
                      const Text('Confirm Password'),
                      TextFormField(
                        controller: _confirmPasswordCtrl,
                        obscureText: true,
                        validator: (value) {
                          if (value!.isEmpty)
                            return 'Confirm Password is required';
                          if (value != _passwordCtrl.text)
                            return 'Passwords do not match';
                          return null;
                        },
                      ),
                      const Divider(),
                    ],
                  ],
                ),
              ),
            ),
          ),
          Align(
            alignment: Alignment.bottomRight,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  !_isLoading
                      ? OutlinedButton(
                          style: OutlinedButton.styleFrom(
                            side: const BorderSide(color: Colors.orangeAccent),
                            foregroundColor: Colors.orange,
                          ),
                          onPressed: () => Navigator.pop(context),
                          child: const Text('Cancel'),
                        )
                      : const SizedBox.shrink(),
                  const SizedBox(width: 8),
                  _isLoading
                      ? const GradientCircularProgressIndicator()
                      : GradientButton(
                          colors: GradientColorSets.set2,
                          onPressed: () async {
                            if (_isLoading) return;
                            if (_formKey.currentState!.validate()) {
                              setState(() => _isLoading = true);
                              try {
                                final newUser = User(
                                  id: widget.userId,
                                  name: _nameCtrl.text,
                                  email: _emailCtrl.text,
                                  role: _role,
                                  provider: isEdit
                                      ? widget.user?.provider
                                      : null,
                                );
                                if (isEdit) {
                                  await _controller.updateUser(
                                    widget.userId!,
                                    newUser,
                                  );
                                } else {
                                  await _controller.addUser(
                                    newUser,
                                    _passwordCtrl.text,
                                  );
                                }
                                if (context.mounted) Navigator.pop(context);
                              } catch (e) {
                                if (context.mounted) {
                                  Toast.show('Error: ${e.toString()}');
                                }
                              } finally {
                                if (context.mounted) {
                                  setState(() => _isLoading = false);
                                }
                              }
                            }
                          },
                          child: Text(
                            buttonText,
                            style: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _nameCtrl.dispose();
    _emailCtrl.dispose();
    _passwordCtrl.dispose();
    _confirmPasswordCtrl.dispose();
    super.dispose();
  }
}

// END OF FILE for pages\manager\modify_user_page.dart


// START | FILE: pages\manager\staff_home_page.dart
//pages/manager/staff_home_page.dart
import 'package:flutter/material.dart';
import 'package:bbqlagao_and_beefpares/pages/manager/inventory_page.dart';
import 'package:bbqlagao_and_beefpares/pages/manager/menu_page.dart';
import 'package:bbqlagao_and_beefpares/pages/manager/staff_list_page.dart';
import 'package:bbqlagao_and_beefpares/pages/manager/modify_item_page.dart';
import 'package:bbqlagao_and_beefpares/pages/manager/modify_dish_page.dart';
import 'package:bbqlagao_and_beefpares/pages/manager/modify_user_page.dart';
import 'package:bbqlagao_and_beefpares/pages/manager/category_page.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/orders_page.dart';
import 'package:bbqlagao_and_beefpares/pages/cashier/order_history_page.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';

class StaffHomePage extends StatefulWidget {
  const StaffHomePage({super.key});

  @override
  State<StaffHomePage> createState() => _StaffHomePageState();
}

class _StaffHomePageState extends State<StaffHomePage> {
  String _currentPage = 'menu';
  String _appBarTitle = 'Staff Dashboard';
  String _tooltip = 'Add Menu';
  late ValueNotifier<bool> _showFabNotifier;
  bool _isManagementExpanded = true;
  bool _isUserManagementExpanded = false;
  bool _isAuditingExpanded = false;
  CategoryPage categoryPage = CategoryPage();

  void _onFabVisibilityChanged(bool visible) {
    _showFabNotifier.value = visible;
  }

  @override
  void initState() {
    super.initState();
    _showFabNotifier = ValueNotifier<bool>(true);
  }

  @override
  void dispose() {
    _showFabNotifier.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (_appBarTitle != 'Staff Dashboard')
              Text(
                'Staff Dashboard',
                style: TextStyle(color: Colors.white, fontSize: 10),
              ),
            Text(_appBarTitle, style: TextStyle(color: Colors.white)),
          ],
        ),

        flexibleSpace:
            [
              "dashboard",
              "inventory",
              "menu",
              "inventory",
              "category",
              "orders",
              "order_history",
              "staffs",
            ].contains(_currentPage)
            ? Container(
                decoration: const BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [Colors.redAccent, Colors.red, Colors.orangeAccent],
                  ),
                ),
              )
            : null,
        leading: Builder(
          builder: (context) => IconButton(
            icon: const Icon(Icons.menu),
            color: Colors.white,
            onPressed: () => Scaffold.of(context).openDrawer(),
          ),
        ),
      ),
      drawer: Drawer(
        child: Column(
          children: [
            Container(
              height: 75.0,
              width: double.infinity,
              decoration: const BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [Colors.redAccent, Colors.red, Colors.orangeAccent],
                ),
              ),
              child: const Padding(
                padding: EdgeInsets.all(2),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.end,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Text(
                      'BBQ Lagao & Beef Pares',
                      style: TextStyle(color: Colors.white, fontSize: 10),
                    ),
                    Text(
                      'Staff Navigation',
                      style: TextStyle(color: Colors.white, fontSize: 20),
                    ),
                  ],
                ),
              ),
            ),
            Expanded(
              child: ListView(
                padding: EdgeInsets.zero,
                children: <Widget>[
                  Padding(
                    padding: EdgeInsets.all(10),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text('Currently Logged-in as:'),
                        SizedBox(width: 5),
                        Icon(FontAwesomeIcons.circleUser, size: 15),
                        SizedBox(width: 5),
                        Expanded(
                          child: Text(
                            'TestTestTestTestTestTestTestTestTestTestTestTestTestTest',
                          ),
                        ),
                      ],
                    ),
                  ),
                  ListTile(
                    leading: Icon(
                      Icons.home,
                      color: _currentPage == 'dashboard'
                          ? Colors.white
                          : Colors.redAccent,
                    ),
                    title: Text(
                      'Dashboard',
                      style: TextStyle(
                        color: _currentPage == 'dashboard'
                            ? Colors.white
                            : Colors.redAccent,
                      ),
                    ),
                    selected: _currentPage == 'dashboard',
                    selectedTileColor: Colors.redAccent.withValues(alpha: 0.75),
                    onTap: () {
                      Navigator.pop(context);
                      setState(() {
                        _currentPage = 'dashboard';
                        _appBarTitle = 'Staff Dashboard';
                      });
                    },
                  ),
                  ExpansionTile(
                    initiallyExpanded: _isManagementExpanded,
                    onExpansionChanged: (expanded) {
                      setState(() {
                        _isManagementExpanded = expanded;
                      });
                    },
                    title: const Text(
                      'Inventory Management',
                      style: TextStyle(color: Colors.redAccent),
                    ),
                    leading: const Icon(
                      Icons.business,
                      color: Colors.redAccent,
                    ),
                    children: <Widget>[
                      ListTile(
                        leading: Icon(
                          Icons.restaurant_menu,
                          color: _currentPage == 'menu'
                              ? Colors.white
                              : Colors.redAccent,
                        ),
                        title: Text(
                          'Menu',
                          style: TextStyle(
                            color: _currentPage == 'menu'
                                ? Colors.white
                                : Colors.redAccent,
                          ),
                        ),
                        selected: _currentPage == 'menu',
                        selectedTileColor: Colors.redAccent.withValues(
                          alpha: 0.75,
                        ),
                        onTap: () {
                          Navigator.pop(context);
                          setState(() {
                            _currentPage = 'menu';
                            _appBarTitle = 'Menu';
                            _tooltip = 'Add Menu';
                          });
                        },
                      ),
                      ListTile(
                        leading: Icon(
                          Icons.inventory,
                          color: _currentPage == 'inventory'
                              ? Colors.white
                              : Colors.redAccent,
                        ),
                        title: Text(
                          'Inventory',
                          style: TextStyle(
                            color: _currentPage == 'inventory'
                                ? Colors.white
                                : Colors.redAccent,
                          ),
                        ),
                        selected: _currentPage == 'inventory',
                        selectedTileColor: Colors.redAccent.withValues(
                          alpha: .75,
                        ),
                        onTap: () {
                          Navigator.pop(context);
                          setState(() {
                            _currentPage = 'inventory';
                            _appBarTitle = 'Inventory';
                            _tooltip = 'Add Item';
                          });
                        },
                      ),
                      ListTile(
                        leading: Icon(
                          Icons.category,
                          color: _currentPage == 'category'
                              ? Colors.white
                              : Colors.redAccent,
                        ),
                        title: Text(
                          'Category',
                          style: TextStyle(
                            color: _currentPage == 'category'
                                ? Colors.white
                                : Colors.redAccent,
                          ),
                        ),
                        selected: _currentPage == 'category',
                        selectedTileColor: Colors.redAccent.withValues(
                          alpha: .75,
                        ),
                        onTap: () {
                          Navigator.pop(context);
                          setState(() {
                            _currentPage = 'category';
                            _appBarTitle = 'Category';
                            _tooltip = 'Add Category';
                          });
                        },
                      ),
                    ],
                  ),
                  ExpansionTile(
                    initiallyExpanded: _isAuditingExpanded,
                    onExpansionChanged: (expanded) {
                      setState(() {
                        _isAuditingExpanded = expanded;
                      });
                    },
                    title: const Text(
                      'Auditing',
                      style: TextStyle(color: Colors.redAccent),
                    ),
                    leading: const Icon(
                      Icons.business,
                      color: Colors.redAccent,
                    ),
                    children: <Widget>[
                      ListTile(
                        leading: Icon(
                          Icons.list,
                          color: _currentPage == 'orders'
                              ? Colors.white
                              : Colors.redAccent,
                        ),
                        title: Text(
                          'Orders',
                          style: TextStyle(
                            color: _currentPage == 'orders'
                                ? Colors.white
                                : Colors.redAccent,
                          ),
                        ),
                        selected: _currentPage == 'orders',
                        selectedTileColor: Colors.redAccent.withValues(
                          alpha: 0.75,
                        ),
                        onTap: () {
                          Navigator.pop(context);
                          setState(() {
                            _currentPage = 'orders';
                            _appBarTitle = 'Orders';
                          });
                        },
                      ),
                      ListTile(
                        leading: Icon(
                          Icons.history,
                          color: _currentPage == 'order_history'
                              ? Colors.white
                              : Colors.redAccent,
                        ),
                        title: Text(
                          'Order History',
                          style: TextStyle(
                            color: _currentPage == 'order_history'
                                ? Colors.white
                                : Colors.redAccent,
                          ),
                        ),
                        selected: _currentPage == 'order_history',
                        selectedTileColor: Colors.redAccent.withValues(
                          alpha: .75,
                        ),
                        onTap: () {
                          Navigator.pop(context);
                          setState(() {
                            _currentPage = 'order_history';
                            _appBarTitle = 'Order History';
                          });
                        },
                      ),
                    ],
                  ),
                  ExpansionTile(
                    initiallyExpanded: _isUserManagementExpanded,
                    onExpansionChanged: (expanded) {
                      setState(() {
                        _isUserManagementExpanded = expanded;
                      });
                    },
                    title: const Text(
                      'User Management',
                      style: TextStyle(color: Colors.redAccent),
                    ),
                    leading: const Icon(Icons.people, color: Colors.redAccent),
                    children: <Widget>[
                      ListTile(
                        leading: Icon(
                          FontAwesomeIcons.userGear,
                          color: _currentPage == 'staffs'
                              ? Colors.white
                              : Colors.redAccent,
                        ),
                        title: Text(
                          'Staffs',
                          style: TextStyle(
                            color: _currentPage == 'staffs'
                                ? Colors.white
                                : Colors.redAccent,
                          ),
                        ),
                        selected: _currentPage == 'staffs',
                        selectedTileColor: Colors.redAccent.withValues(
                          alpha: .75,
                        ),
                        onTap: () {
                          Navigator.pop(context);
                          setState(() {
                            _currentPage = 'staffs';
                            _appBarTitle = 'Staffs';
                            _tooltip = 'Add Staff';
                          });
                        },
                      ),
                    ],
                  ),
                ],
              ),
            ),
            Align(
              alignment: Alignment.bottomRight,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: IconButton(
                  icon: const Icon(Icons.arrow_left),
                  onPressed: () => Navigator.pop(context),
                  tooltip: 'Close menu',
                ),
              ),
            ),
          ],
        ),
      ),
      body: _buildBody(),
      floatingActionButton:
          ["inventory", "menu", "staffs"].contains(_currentPage)
          ? ValueListenableBuilder<bool>(
              valueListenable: _showFabNotifier,
              builder: (context, showFab, child) {
                if (!showFab) return const SizedBox.shrink();
                return FloatingActionButton(
                  backgroundColor: Colors.redAccent[100],
                  shape: const CircleBorder(),
                  foregroundColor: Colors.white,
                  onPressed: () {
                    switch (_currentPage) {
                      case 'inventory':
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const ModifyItemPage(),
                          ),
                        );
                        break;
                      case 'menu':
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const ModifyDishPage(),
                          ),
                        );
                        break;
                      case 'staffs':
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const ModifyUserPage(),
                          ),
                        );
                        break;
                      case 'category':
                        break;
                    }
                  },
                  tooltip: _tooltip,
                  child: const Icon(Icons.add),
                );
              },
            )
          : null,
    );
  }

  Widget _buildBody() {
    switch (_currentPage) {
      case 'menu':
        return MenuPage(onFabVisibilityChanged: _onFabVisibilityChanged);
      case 'inventory':
        return InventoryPage(onFabVisibilityChanged: _onFabVisibilityChanged);
      case 'staffs':
        return StaffListPage(onFabVisibilityChanged: _onFabVisibilityChanged);
      case 'category':
        return CategoryPage(onFabVisibilityChanged: _onFabVisibilityChanged);
      case 'orders':
        return OrdersPage(onFabVisibilityChanged: _onFabVisibilityChanged);
      case 'order_history':
        return OrderHistoryPage();
      default:
        return const Center(child: Text('Page not implemented'));
    }
  }
}

// END OF FILE for pages\manager\staff_home_page.dart


// START | FILE: pages\manager\staff_list_page.dart
import 'package:bbqlagao_and_beefpares/widgets/customtoast.dart';
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:bbqlagao_and_beefpares/widgets/gradient_progress_indicator.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:bbqlagao_and_beefpares/controllers/manager/users_controller.dart';
import 'package:bbqlagao_and_beefpares/models/user.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:gradient_icon/gradient_icon.dart';
import 'modify_user_page.dart';

class StaffListPage extends StatefulWidget {
  final void Function(bool)? onFabVisibilityChanged;
  const StaffListPage({super.key, this.onFabVisibilityChanged});

  @override
  State<StaffListPage> createState() => _StaffListPageState();
}

class _StaffListPageState extends State<StaffListPage> {
  final ScrollController _scrollController = ScrollController();
  final UsersController _controller = UsersController();

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_scrollListener);
  }

  void _scrollListener() {
    final visible =
        _scrollController.position.userScrollDirection !=
        ScrollDirection.reverse;
    if (widget.onFabVisibilityChanged != null) {
      widget.onFabVisibilityChanged!(visible);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            children: [
              Expanded(
                child: Text(
                  'Staffs',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
              ),
              Text('Actions', style: Theme.of(context).textTheme.titleLarge),
            ],
          ),
        ),
        Expanded(
          child: StreamBuilder<List<User>>(
            stream: _controller.getUsers,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: GradientCircularProgressIndicator());
              }
              if (snapshot.hasError) {
                return Center(child: Text('Error: ${snapshot.error}'));
              }
              if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return const Center(child: Text('No staff found.'));
              }
              final users = snapshot.data!;
              return ListView.builder(
                controller: _scrollController,
                itemCount: users.length,
                itemBuilder: (context, index) {
                  final user = users[index];
                  return Container(
                    margin: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [Colors.red[50]!, Colors.orange[50]!],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  user.name,
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                Text(user.email),
                                Text("Role: ${user.role}"),
                                Text("Provider: ${user.provider ?? 'Unknown'}"),
                              ],
                            ),
                          ),
                          IconButton(
                            icon: GradientIcon(
                              icon: Icons.edit,
                              gradient: LinearGradient(
                                colors: GradientColorSets.set2,
                              ),
                              offset: Offset.zero,
                            ),
                            onPressed: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => ModifyUserPage(
                                    userId: user.id,
                                    user: user,
                                  ),
                                ),
                              );
                            },
                            tooltip: "Edit Staff",
                          ),
                        ],
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ),
      ],
    );
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }
}

// END OF FILE for pages\manager\staff_list_page.dart


// START | FILE: styles\color.dart
import 'package:flutter/material.dart';

class GradientColorSets {
  static const List<Color> set1 = [
    Colors.redAccent,
    Colors.amber,
    Colors.orangeAccent,
  ];
  static const List<Color> set2 = [
    Colors.amber,
    Colors.orangeAccent,
    Colors.redAccent,
  ];
  static const List<Color> set3 = [
    Colors.orangeAccent,
    Colors.redAccent,
    Colors.amber,
  ];
}

class LightGradientColorSets {
  static List<Color> set1 = [
    Colors.red.shade50,
    Colors.amber.shade50,
    Colors.orange.shade50,
  ];
  static List<Color> set2 = [
    Colors.amber.shade50,
    Colors.orange.shade50,
    Colors.red.shade50,
  ];
  static List<Color> set3 = [
    Colors.orange.shade50,
    Colors.red.shade50,
    Colors.amber.shade50,
  ];
}

// END OF FILE for styles\color.dart


// START | FILE: widgets\customtoast.dart
// customtoast.dart
import 'package:flutter/material.dart';
import '../globals.dart';

class Toast {
  static OverlayEntry? _currentEntry;

  static void show(
    String message, {
    Duration duration = const Duration(seconds: 2),
  }) {
    if (navigatorKey.currentState == null) return;
    // Remove current toast if one exists
    _currentEntry?.remove();
    _currentEntry = null;

    final overlay = navigatorKey.currentState!.overlay!;
    late OverlayEntry entry;

    entry = OverlayEntry(
      builder: (context) => _ToastWidget(
        message: message,
        duration: duration,
        onFinish: () {
          entry.remove();
          if (_currentEntry == entry) _currentEntry = null;
        },
      ),
    );

    _currentEntry = entry;
    overlay.insert(entry);
  }
}

class _ToastWidget extends StatefulWidget {
  final String message;
  final Duration duration;
  final VoidCallback onFinish;

  const _ToastWidget({
    required this.message,
    required this.duration,
    required this.onFinish,
  });

  @override
  State<_ToastWidget> createState() => _ToastWidgetState();
}

class _ToastWidgetState extends State<_ToastWidget>
    with TickerProviderStateMixin {
  late AnimationController _fadeController;
  late AnimationController _slideController;

  late Animation<double> _fadeInAnimation;
  late Animation<Offset> _slideUpAnimation;

  @override
  void initState() {
    super.initState();

    // Quick fade-in
    _fadeController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 200),
    );
    _fadeInAnimation = CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeIn,
    );

    // Slight upward motion while fading in
    _slideController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 200),
    );
    _slideUpAnimation = Tween<Offset>(
      begin: const Offset(0, 0.1),
      end: Offset.zero,
    ).animate(CurvedAnimation(parent: _slideController, curve: Curves.easeOut));

    _fadeController.forward();
    _slideController.forward();

    // Trigger slow fade-out after duration
    Future.delayed(widget.duration, () {
      if (mounted) {
        _fadeController.reverseDuration = const Duration(milliseconds: 800);
        _fadeController.reverse().whenComplete(widget.onFinish);
      }
    });
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _slideController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Positioned(
      bottom: 80,
      left: MediaQuery.of(context).size.width * 0.1,
      right: MediaQuery.of(context).size.width * 0.1,
      child: Material(
        color: Colors.transparent,
        child: FadeTransition(
          opacity: _fadeInAnimation,
          child: SlideTransition(
            position: _slideUpAnimation,
            child: Center(
              child: Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 10,
                ),
                decoration: BoxDecoration(
                  color: Colors.black87,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  widget.message,
                  style: const TextStyle(color: Colors.white, fontSize: 14),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
// END OF FILE for widgets\customtoast.dart


// START | FILE: widgets\gradient_button.dart
import 'package:flutter/material.dart';

class GradientButton extends StatelessWidget {
  final VoidCallback onPressed;
  final VoidCallback? onLongPressed;
  final Widget? child;
  final ValueChanged<bool>? onHover;
  final List<Color>? colors;
  final double? radius;
  final EdgeInsets? padding;

  const GradientButton({
    super.key,
    required this.onPressed,
    this.onLongPressed,
    this.onHover,
    this.child,
    this.colors = const [Colors.orange, Colors.red, Colors.amber],
    this.radius = 20,
    this.padding = const EdgeInsets.symmetric(horizontal: 30, vertical: 12),
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: colors!,
        ),
        borderRadius: BorderRadius.all(Radius.circular(radius!)),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.all(Radius.circular(radius!)),
          onTap: onPressed,
          onLongPress: onLongPressed,
          onHover: onHover,
          child: Padding(padding: padding!, child: child),
        ),
      ),
    );
  }
}

// END OF FILE for widgets\gradient_button.dart


// START | FILE: widgets\gradient_checkbox.dart
// gradient_checkbox.dart
import 'package:flutter/material.dart';

class GradientCheckbox extends StatelessWidget {
  final bool? value;
  final ValueChanged<bool?>? onChanged;

  const GradientCheckbox({
    super.key,
    required this.value,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return ShaderMask(
      shaderCallback: (bounds) => const LinearGradient(
        colors: [Colors.orange, Colors.red, Colors.amber],
      ).createShader(bounds),
      child: Checkbox(
        value: value,
        onChanged: onChanged,
        activeColor: Colors.white,
        checkColor: Colors.black,
      ),
    );
  }
}

// END OF FILE for widgets\gradient_checkbox.dart


// START | FILE: widgets\gradient_progress_indicator.dart
// widgets\gradient_progress_indicator.dart
import 'package:bbqlagao_and_beefpares/styles/color.dart';
import 'package:flutter/material.dart';

class GradientCircularProgressIndicator extends StatelessWidget {
  const GradientCircularProgressIndicator({super.key});

  @override
  Widget build(BuildContext context) {
    return ShaderMask(
      shaderCallback: (Rect bounds) {
        return const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: GradientColorSets.set1,
        ).createShader(bounds);
      },
      child: const SizedBox(
        width: 30,
        height: 30,
        child: CircularProgressIndicator(
          padding: EdgeInsets.all(3),
          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
          strokeWidth: 3,
        ),
      ),
    );
  }
}

// END OF FILE for widgets\gradient_progress_indicator.dart


